{"version":3,"sources":["dist/index.js","pages/random/Random.js","wrappers/P5Wrapper.js","pages/white/noise1DSketch2.js","pages/white/noise2DSketch.js","pages/white/White.js","pages/perlin/noise1DSketch.js","pages/perlin/noise2DSketch.js","pages/perlin/Perlin.js","App.js","serviceWorker.js","index.js"],"names":["_defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","utils","fract","input","this","makePositive","Math","floor","normalizeSeed","seed","Number","split","map","_char","charCodeAt","join","smoothStep","f","scaled_cosine","cos","PI","NoiseGenerator","instance","Constructor","TypeError","_classCallCheck","computedSeed","noise","NOISE_YWRAPB","NOISE_YWRAP","NOISE_ZWRAPB","NOISE_ZWRAP","NOISE_SIZE","lcg","m","a","c","z","white","perlin_octaves","octaves","perlin_amp_falloff","falloff","setNoiseSeed","protoProps","staticProps","value","x","y","random","sin","xi","yi","zi","zf","Array","n1","n2","r","of","rxf","ryf","n3","xf","yf","ampl","o","lod","prototype","module","exports","Random","state","noiseGenerator","PNG5","seedValue","computeNoises","className","Component","P5Wrapper","canvas","doesComponentReceivedData","bind","setState","p5","sketch","el","data","ref","scale","prevData","drawFrame","background","fill","beginShape","width","divisionValue","getNoise","noiseScaleValue","height","vertex","offsetValue","endShape","CLOSE","resizeCanvas","parentWidth","parent","clientWidth","computedHeight","setup","createCanvas","draw","windowResized","rectSize","noStroke","rect","White","scaleValue","noise1DSketch2","noise2DSketch","handleChange","event","name","rgbValue","round","hex","toString","hexValue","display","backgroundColor","rgbToHex","type","onChange","min","max","step","getWhiteNoise","Perlin","lodValue","falloffValue","noise1DSketch","setPerlinNoiseDetail","getPerlinNoise","App","useEffect","M","AutoInit","links","to","getNavLinks","link","linkIndex","href","data-target","id","path","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e57efe54.chunk.js","sourcesContent":["'use strict';\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction fract(input) {\n  input = this.makePositive(input);\n  var integer = Math.floor(input);\n  var decimal = input - integer;\n  return decimal;\n}\n\nfunction normalizeSeed(seed) {\n  if (typeof seed != 'number') {\n    seed = Number(seed.split('').map(function (_char) {\n      return _char.charCodeAt(0);\n    }).join(''));\n  }\n\n  return seed;\n}\n\nfunction makePositive(input) {\n  return input < 0 ? -input : input;\n}\n\nfunction smoothStep(f) {\n  return f * f * (3.0 - 2.0 * f);\n}\n\nfunction scaled_cosine(i) {\n  return 0.5 * (1.0 - Math.cos(i * Math.PI));\n}\n\nvar utils = {\n  fract: fract,\n  normalizeSeed: normalizeSeed,\n  makePositive: makePositive,\n  smoothStep: smoothStep,\n  scaled_cosine: scaled_cosine\n};\n\nvar NoiseGenerator =\n/*#__PURE__*/\nfunction () {\n  function NoiseGenerator(props) {\n    _classCallCheck(this, NoiseGenerator);\n\n    // GLOBAL VARIABLES\n    this.seed = null;\n    this.computedSeed = null;\n    this.noise = null; // will be initialized lazily by getNoise() or setNoiseSeed()\n\n    this.NOISE_YWRAPB = 4;\n    this.NOISE_YWRAP = 1 << this.NOISE_YWRAPB;\n    this.NOISE_ZWRAPB = 8;\n    this.NOISE_ZWRAP = 1 << this.NOISE_ZWRAPB;\n    this.NOISE_SIZE = 4095; // Linear Congruential Generator\n    // Variant of a Lehman Generator\n\n    this.lcg = {\n      // Set to values from http://en.wikipedia.org/wiki/Numerical_Recipes\n      // m is basically chosen to be large (as it is the max period)\n      // and for its relationships to a and c\n      m: 4294967296,\n      // a - 1 should be divisible by m's prime factors\n      a: 1664525,\n      // c and m should be co-prime\n      c: 1013904223,\n      z: null\n    }; // WHITE NOISE\n\n    this.white = null; // // BROWNIAN NOISE\n    // this.BROWNIAN_YWRAPB = 4\n    // this.BROWNIAN_YWRAP = 1 << this.BROWNIAN_YWRAPB\n    // this.BROWNIAN_ZWRAPB = 8\n    // this.BROWNIAN_ZWRAP = 1 << this.BROWNIAN_ZWRAPB\n    // this.BROWNIAN_SIZE = 4095\n    // this.brownian = null\n    // PERLIN NOISE    \n\n    this.perlin_octaves = props && props.octaves ? props.octaves : 4; // default to medium smooth\n\n    this.perlin_amp_falloff = props && props.falloff ? props.falloff : 0.5; // 50% reduction/octave\n    // this.perlin = null // will be initialized lazily by getNoise() or setNoiseSeed()\n    // CELLULAR NOISE\n\n    if (props && props.seed) this.setNoiseSeed(props.seed);\n  }\n\n  _createClass(NoiseGenerator, [{\n    key: \"random\",\n    value: function random(x, y, z) {\n      x = x ? utils.normalizeSeed(x) : Math.random();\n      y = y ? utils.normalizeSeed(y) : 0;\n      z = z ? utils.normalizeSeed(z) : 0;\n      x = utils.makePositive(x);\n      y = utils.makePositive(y);\n      z = utils.makePositive(z);\n      var output = utils.fract(Math.sin(x) * 100000.0);\n      return output;\n    } // WHITE NOISE\n\n  }, {\n    key: \"getWhiteNoise\",\n    value: function getWhiteNoise(x, y, z) {\n      x = x || Math.random();\n      y = y || 0;\n      z = z || 0; // let vector = null\n      // if(x && y && z) {\n      //   vector  = new vectors.Vect3(x, y, z)\n      // } else if (x && y) {\n      //   vector = new vectors.Vect2(x, y)\n      // } else if (x) {\n      //   vector = this.random()\n      // } else {\n      //   vector = 'WTF'\n      // }\n      // console.log('vector : ', vector)\n\n      var xi = Math.floor(utils.makePositive(x));\n      var yi = Math.floor(utils.makePositive(y));\n      var zi = Math.floor(utils.makePositive(z));\n      var xf = utils.fract(x);\n      var yf = utils.fract(y);\n      var zf = utils.fract(z);\n\n      if (this.noise == null) {\n        this.noise = new Array(this.NOISE_SIZE + 1);\n\n        for (var i = 0; i < this.NOISE_SIZE + 1; i++) {\n          // this.noise[i] = this.random()\n          this.noise[i] = Math.random();\n        }\n      }\n\n      var r = 0;\n      var n1, n2, n3;\n      var of = xi + (yi << this.NOISE_YWRAPB) + (zi << this.NOISE_ZWRAPB);\n      n1 = this.noise[of & this.NOISE_SIZE];\n      n2 = this.noise[of + this.NOISE_YWRAP & this.NOISE_SIZE];\n      of += this.NOISE_ZWRAP;\n      n3 = this.noise[of + this.NOISE_YWRAP & this.NOISE_SIZE];\n      n1 += utils.scaled_cosine(zf) * (n2 - n1); // r += n1 * ampl\n\n      r += n1;\n      return r;\n    }\n  }, {\n    key: \"setWhiteNoiseSeed\",\n    value: function setWhiteNoiseSeed(input) {} // this.white = new Array(this.NOISE_SIZE + 1)\n    // for (var i = 0; i < this.NOISE_SIZE + 1; i++) {\n    //   this.white[i] = lcg.rand()\n    // }\n    // PERLIN NOISE\n\n  }, {\n    key: \"getPerlinNoise\",\n    value: function getPerlinNoise(x, y, z) {\n      y = y || 0;\n      z = z || 0;\n\n      if (this.noise == null) {\n        this.noise = new Array(this.NOISE_SIZE + 1);\n\n        for (var i = 0; i < this.NOISE_SIZE + 1; i++) {\n          this.noise[i] = Math.random();\n        }\n      }\n\n      x = utils.makePositive(x);\n      y = utils.makePositive(y);\n      z = utils.makePositive(z);\n      var xi = Math.floor(x),\n          yi = Math.floor(y),\n          zi = Math.floor(z);\n      var xf = x - xi;\n      var yf = y - yi;\n      var zf = z - zi;\n      var rxf, ryf;\n      var r = 0;\n      var ampl = 0.5;\n      var n1, n2, n3;\n\n      for (var o = 0; o < this.perlin_octaves; o++) {\n        var of = xi + (yi << this.NOISE_YWRAPB) + (zi << this.NOISE_ZWRAPB);\n        rxf = utils.scaled_cosine(xf);\n        ryf = utils.scaled_cosine(yf);\n        n1 = this.noise[of & this.NOISE_SIZE];\n        n1 += rxf * (this.noise[of + 1 & this.NOISE_SIZE] - n1);\n        n2 = this.noise[of + this.NOISE_YWRAP & this.NOISE_SIZE];\n        n2 += rxf * (this.noise[of + this.NOISE_YWRAP + 1 & this.NOISE_SIZE] - n2);\n        n1 += ryf * (n2 - n1);\n        of += this.NOISE_ZWRAP;\n        n2 = this.noise[of & this.NOISE_SIZE];\n        n2 += rxf * (this.noise[of + 1 & this.NOISE_SIZE] - n2);\n        n3 = this.noise[of + this.NOISE_YWRAP & this.NOISE_SIZE];\n        n3 += rxf * (this.noise[of + this.NOISE_YWRAP + 1 & this.NOISE_SIZE] - n3);\n        n2 += ryf * (n3 - n2);\n        n1 += utils.scaled_cosine(zf) * (n2 - n1);\n        r += n1 * ampl;\n        ampl *= this.perlin_amp_falloff;\n        xi <<= 1;\n        xf *= 2;\n        yi <<= 1;\n        yf *= 2;\n        zi <<= 1;\n        zf *= 2;\n\n        if (xf >= 1.0) {\n          xi++;\n          xf--;\n        }\n\n        if (yf >= 1.0) {\n          yi++;\n          yf--;\n        }\n\n        if (zf >= 1.0) {\n          zi++;\n          zf--;\n        }\n      }\n\n      return r;\n    }\n  }, {\n    key: \"setPerlinNoiseDetail\",\n    value: function setPerlinNoiseDetail(lod, falloff) {\n      if (lod > 0) {\n        this.perlin_octaves = lod;\n      }\n\n      if (falloff > 0) {\n        this.perlin_amp_falloff = falloff;\n      }\n    }\n  }, {\n    key: \"setNoiseSeed\",\n    value: function setNoiseSeed(seed) {\n      this.seed = seed;\n      seed = utils.normalizeSeed(seed); // pick a random seed if seed is undefined or null\n      // the >>> 0 casts the seed to an unsigned 32-bit integer\n\n      this.computedSeed = this.lcg.z = (seed == null ? Math.random() * this.lcg.m : seed) >>> 0;\n      this.noise = new Array(this.NOISE_SIZE + 1);\n\n      for (var i = 0; i < this.NOISE_SIZE + 1; i++) {\n        this.lcg.z = (this.lcg.a * this.lcg.z + this.lcg.c) % this.lcg.m; // define the recurrence relationship\n        // return a float in [0, 1)\n        // if this.lcg.z = m then this.lcg.z / m = 0 therefore (this.lcg.z % m) / m < 1 always\n\n        this.noise[i] = this.lcg.z / this.lcg.m;\n      }\n    }\n  }, {\n    key: \"getNoiseSeed\",\n    value: function getNoiseSeed() {\n      return this.seed;\n    }\n  }]);\n\n  return NoiseGenerator;\n}();\n\n// module.exports = require('./noise.js')\n\nmodule.exports = NoiseGenerator;\n","import React, {Component} from 'react'\n// import PNG5 from 'png5'\nimport PNG5 from '../../dist/index'\n\nclass Random extends Component {\n\n    constructor(props) {\n        super(props)\n        \n        this.state = {\n            noiseGenerator: new PNG5(),\n            seedValue: 'seed',\n        }\n\n        this.state.noiseGenerator.setNoiseSeed(this.state.seedValue)\n    }\n\n    componentDidMount() {\n        this.computeNoises()\n    }\n\n    computeNoises() {\n        this.state.noiseGenerator.setNoiseSeed(this.state.seedValue)\n    }\n    \n    render() {\n        \n        return(\n            <div className=\"container-fluid\">\n                <h1>Random</h1>\n\n                <div className=\"row\">\n                    <div className=\"col s3 left-form\">\n\n                    </div>\n    \n                    <div className=\"col s3\"></div>\n                    \n                    <div className=\"col s9\">\n                        <h3>Undetermined Random</h3>\n                        <code>random()</code>\n                        {this.state.noiseGenerator.random()}<br/>\n                        <code>random()</code>\n                        {this.state.noiseGenerator.random()}<br/>\n                        <code>random()</code>\n                        {this.state.noiseGenerator.random()}<br/>\n        \n                        <h3>Determined Random</h3>\n                        <code>random(1)</code>\n                        {this.state.noiseGenerator.random(1)}<br/>\n                        <code>random(45.7098)</code>\n                        {this.state.noiseGenerator.random(45.7098)}<br/>\n                        <code>random(-45.7098)</code>\n                        {this.state.noiseGenerator.random(-45.7098)}<br/>\n                        <code>random(\"lol\")</code>\n                        {this.state.noiseGenerator.random(\"lol\")}<br/>\n                    </div>\n                </div>\n\n            </div>\n        )\n    }\n}\n\nexport default Random","import React, {Component} from 'react'\nimport p5 from 'p5'\n// import '../../p5/addons/p5.sound.js'\n\nclass P5Wrapper extends Component {\n\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            canvas: null,\n            // canvas: new p5(this.props.sketch, this.el),\n        }\n\n        this.doesComponentReceivedData = this.doesComponentReceivedData.bind(this)\n    }\n\n    componentDidMount() {\n        this.setState({canvas: new p5(this.props.sketch, this.el)})\n        // const canvasAndData = {...new p5(this.props.sketch, this.el), data: this.props.data}\n        // this.setState({canvas: canvasAndData})\n\n        // this.doesComponentReceivedData()\n    }\n\n    componentDidUpdate() {\n        this.doesComponentReceivedData()\n        // this.forceUpdate()\n    }\n\n    doesComponentReceivedData() {\n        this.state.canvas.data = this.props.data ? this.props.data : null\n\n        // const dataObject = {data: this.props.data}\n\n        // // this.setState((prevState) => ({\n        // //     canvas: Object.assign({}, prevState.canvas, dataObject)\n        // // }))\n        \n        // // console.log('this.state.canvas', this.state.canvas)\n        // this.setState((prevState) => ({\n        //     canvas: {\n        //         ...prevState.canvas,\n        //         ...dataObject\n        //     }\n        // }))\n        // // console.log('this.state.canvas', this.state.canvas)\n    }\n\n    render() {\n        return (\n            <div className=\"sketch\" ref={(el) => {this.el = el}}></div>\n        )\n    }\n}\n\nexport default P5Wrapper","export default (p5) => {\n    let canvas = null\n    // const scale = 0.05\n    const scale = 1\n    // const scale = 10\n\n    let prevData = null\n\n    p5.setup = function() {\n        canvas = p5.createCanvas(0,0)\n        resizeCanvas()\n    }\n  \n    p5.draw = function() {\n        if(p5.data && p5.data !== prevData) {\n            drawFrame()\n            prevData = p5.data            \n        }\n    }\n\n    function drawFrame() {\n\n        p5.background(51)\n\n        p5.fill(255)\n\n        p5.beginShape()\n\n        for (let x = 0; x <= p5.width; x += p5.width/p5.data.divisionValue) {\n\n            let y = p5.map(1 - p5.data.getNoise(x * p5.data.noiseScaleValue * scale), 0, 1, 0, p5.height)\n\n            // p5.circle(x, y - p5.data.offsetValue * p5.height, 10)\n            p5.vertex(x, y - p5.data.offsetValue * p5.height)\n        }\n        \n        p5.vertex(p5.width, p5.height)\n        p5.vertex(0, p5.height)\n\n        p5.endShape(p5.CLOSE)\n\n    }\n\n    function resizeCanvas() {\n        const coef = 0.75\n        const parentWidth = canvas.parent().clientWidth * coef\n        const computedHeight = parentWidth * (9/16)\n        p5.resizeCanvas(parentWidth, computedHeight)\n    }\n    p5.windowResized = function() {\n        resizeCanvas()\n        drawFrame()\n    }\n}","export default (p5) => {\n    let canvas = null\n    // const scale = 0.05\n    const scale = 1\n    // const scale = 10\n\n    let prevData = null\n\n    p5.setup = function() {\n        canvas = p5.createCanvas(0,0)\n        resizeCanvas()\n        // drawFrame()\n    }\n  \n    p5.draw = function() {\n        if(p5.data && p5.data !== prevData) {\n            drawFrame()\n            prevData = p5.data            \n        }\n    }\n\n    function drawFrame() {\n\n        const rectSize = p5.width / p5.data.divisionValue\n\n        p5.noStroke()\n\n        for (var x = 0; x < p5.width; x += rectSize) {\n            for (var y = 0; y < p5.height; y += rectSize) {\n              p5.fill(p5.data.getNoise(x * p5.data.noiseScaleValue * scale, y * p5.data.noiseScaleValue * scale) * 255 + p5.data.offsetValue * 255)\n              p5.rect(x, y, rectSize, rectSize)\n            }\n        }\n    }\n\n    p5.windowResized = function() {\n        resizeCanvas()\n        drawFrame()\n    }\n    function resizeCanvas() {\n        const coef = 0.75\n        const parentWidth = canvas.parent().clientWidth * coef\n        const computedHeight = parentWidth * (9/16)\n        p5.resizeCanvas(parentWidth, computedHeight)\n    }\n}","import React, {Component} from 'react'\n// import PNG5 from 'png5'\nimport PNG5 from '../../dist/index'\n\nimport P5 from '../../wrappers/P5Wrapper'\nimport noise1DSketch2 from './noise1DSketch2'\nimport noise2DSketch from './noise2DSketch'\n\nclass White extends Component {\n\n    constructor(props) {\n        super(props)\n        \n        this.state = {\n            noiseGenerator: new PNG5(),\n            \n            // scaleValue: 1,\n            scaleValue: 0.3,\n            divisionValue: 64,\n            offsetValue: 0,\n\n            seedValue: 'seed',\n\n            // lodValue: 4,\n            // falloffValue: 0.5,\n            \n            noise1DSketch2: noise1DSketch2,\n            noise2DSketch: noise2DSketch,\n        }\n\n        this.state.noiseGenerator.setNoiseSeed(this.state.seedValue)\n\n        this.handleChange = this.handleChange.bind(this)\n    }\n\n    componentDidMount() {\n        this.computeNoises()\n    }\n\n    onUpdate() {\n    // componentDidUpdate() {\n        this.computeNoises()\n    }\n\n    handleChange(event) {\n        const {name, value} = event.target\n        this.setState({[name]: value})\n        this.computeNoises()\n    }\n\n    computeNoises() {\n        this.state.noiseGenerator.setNoiseSeed(this.state.seedValue)\n    }\n    \n    rgbToHex(value) { \n        const rgbValue = Math.round(value * 255)\n        let hex = Number(rgbValue).toString(16);\n        if (hex.length < 2) {\n            hex = \"0\" + hex;\n        }\n        return \"#\" + hex + hex + hex;\n    }\n    \n    styleForCell(hexValue) {\n        return {\n            display: 'inline-block',\n            width: '10px',\n            height: '10px',\n            // margin: '0px',\n            // padding: '0px',\n            backgroundColor: this.rgbToHex(hexValue),\n        }\n    }\n\n    render() {\n        \n        return(\n            <div className=\"container-fluid\">\n                <h1>White Noise</h1>\n\n                <div className=\"row\">\n                    <div className=\"col s3 left-form\">\n                        <div className=\"card-panel grey lighten-4\">\n                            <label>\n                                scale ({this.state.scaleValue}) :\n                                <input type=\"range\" name=\"scaleValue\" \n                                value={this.state.scaleValue} onChange={this.handleChange}\n                                min=\"0.01\" max=\"1\" step=\"0.01\" />\n                            </label>\n                            <label>\n                                divisions ({this.state.divisionValue}) :\n                                <input type=\"range\" name=\"divisionValue\" \n                                value={this.state.divisionValue} onChange={this.handleChange}\n                                min=\"2\" max=\"192\" step=\"1\" />\n                            </label>\n                            <label>\n                                Offset ({this.state.offsetValue}) :\n                                <input type=\"range\" name=\"offsetValue\" \n                                value={this.state.offsetValue} onChange={this.handleChange}\n                                min=\"-1\" max=\"1\" step=\"0.01\" />\n                            </label>\n                        </div>\n\n                        <div className=\"card-panel grey lighten-4\">\n                            <label>\n                                Seed :\n                                <input type=\"text\" value={this.state.seedValue} onChange={this.handleChange} name=\"seedValue\"></input>\n                                {/* <input type=\"number\" value={this.state.seedValue} onChange={this.handleChange} name=\"seedValue\"></input> */}\n                            </label>\n                            {/* <button>Generate</button> */}\n                        </div>\n                    </div>\n    \n                    <div className=\"col s3\"></div>\n                    \n                    <div className=\"col s9\">\n        \n                        <h3>Determined Random</h3>\n                        <code>getWhiteNoise(1)</code>\n                        {this.state.noiseGenerator.getWhiteNoise(1)}<br/>\n                        <code>getWhiteNoise(45.7098)</code>\n                        {this.state.noiseGenerator.getWhiteNoise(45.7098)}<br/>\n                        <code>getWhiteNoise(-45.7098)</code>\n                        {this.state.noiseGenerator.getWhiteNoise(-45.7098)}<br/>\n                        <code>getWhiteNoise(\"lol\")</code>\n                        {this.state.noiseGenerator.getWhiteNoise(\"lol\")}<br/>\n        \n                        <h3>1D noise</h3>\n                        <P5 sketch={this.state.noise1DSketch2}\n                            data={{\n                                offsetValue: this.state.offsetValue,\n                                noiseScaleValue: this.state.scaleValue,\n                                divisionValue: this.state.divisionValue,\n                                getNoise: (x,y,z) => this.state.noiseGenerator.getWhiteNoise(x,y,z)\n                            }}\n                        />\n                        <h3>2D noise</h3>\n                        <P5 sketch={this.state.noise2DSketch} \n                            data={{\n                                offsetValue: this.state.offsetValue,\n                                noiseScaleValue: this.state.scaleValue,\n                                divisionValue: this.state.divisionValue,\n                                getNoise: (x,y,z) => this.state.noiseGenerator.getWhiteNoise(x,y,z)\n                            }}\n                        />\n                        {/* <h3>3D noise</h3> */}\n                    </div>\n                </div>\n\n            </div>\n        )\n    }\n}\n\nexport default White","export default (p5) => {\n    let canvas = null\n    const scale = 0.05\n\n    let prevData = null\n\n    p5.setup = function() {\n        canvas = p5.createCanvas(0,0)\n        resizeCanvas()\n    }\n  \n    p5.draw = function() {\n        if(p5.data && p5.data !== prevData) {\n            drawFrame()\n            prevData = p5.data            \n        }\n    }\n\n    function drawFrame() {\n        p5.background(51)\n\n        p5.fill(255)\n\n        p5.beginShape()\n\n        for (let x = 0; x <= p5.width; x += p5.width/p5.data.divisionValue) {\n            let y = p5.map(1 - p5.data.getNoise(x * p5.data.noiseScaleValue * scale), 0, 1, 0, p5.height)\n            p5.vertex(x, y - p5.data.offsetValue * p5.height)\n        }\n        \n        p5.vertex(p5.width, p5.height)\n        p5.vertex(0, p5.height)\n        p5.endShape(p5.CLOSE)\n\n    }\n\n    function resizeCanvas() {\n        const coef = 0.75\n        const parentWidth = canvas.parent().clientWidth * coef\n        const computedHeight = parentWidth * (9/16)\n        p5.resizeCanvas(parentWidth, computedHeight)\n    }\n    p5.windowResized = function() {\n        resizeCanvas()\n        drawFrame()\n    }\n}","export default (p5) => {\n    let canvas = null\n    const scale = 0.05\n\n    let prevData = null\n\n    p5.setup = function() {\n        canvas = p5.createCanvas(0,0)\n        resizeCanvas()\n        // drawFrame()\n    }\n  \n    p5.draw = function() {\n        if(p5.data && p5.data !== prevData) {\n            drawFrame()\n            prevData = p5.data            \n        }\n    }\n\n    function drawFrame() {\n\n        const rectSize = p5.width / p5.data.divisionValue\n\n        p5.noStroke()\n        for (var x = 0; x < p5.width; x += rectSize) {\n            for (var y = 0; y < p5.height; y += rectSize) {\n              p5.fill(p5.data.getNoise(x * p5.data.noiseScaleValue * scale, y * p5.data.noiseScaleValue * scale) * 255 + p5.data.offsetValue * 255)\n              p5.rect(x, y, rectSize, rectSize)\n            }\n        }\n    }\n\n    p5.windowResized = function() {\n        resizeCanvas()\n        drawFrame()\n    }\n    function resizeCanvas() {\n        const coef = 0.75\n        const parentWidth = canvas.parent().clientWidth * coef\n        const computedHeight = parentWidth * (9/16)\n        p5.resizeCanvas(parentWidth, computedHeight)\n    }\n}","import React, {Component} from 'react'\n// import PNG5 from 'png5'\nimport PNG5 from '../../dist/index'\n\nimport P5 from '../../wrappers/P5Wrapper'\nimport noise1DSketch from './noise1DSketch'\nimport noise2DSketch from './noise2DSketch'\n\nclass Perlin extends Component {\n\n    constructor(props) {\n        super(props)\n        \n        this.state = {\n            noiseGenerator: new PNG5(),\n\n            // scaleValue: 1,\n            scaleValue: 0.3,\n            divisionValue: 64,\n            offsetValue: 0,\n\n            seedValue: 'seed',\n            lodValue: 4,\n            falloffValue: 0.5,\n            \n            noise1DSketch: noise1DSketch,\n            noise2DSketch: noise2DSketch,\n        }\n\n        this.state.noiseGenerator.setNoiseSeed(this.state.seedValue)\n\n        this.handleChange = this.handleChange.bind(this)\n    }\n\n    componentDidMount() {\n        this.computeNoises()\n    }\n\n    onUpdate() {\n    // componentDidUpdate() {\n        this.computeNoises()\n    }\n\n    handleChange(event) {\n        const {name, value} = event.target\n        this.setState({[name]: value})\n        this.computeNoises()\n    }\n\n    computeNoises() {\n        this.state.noiseGenerator.setNoiseSeed(this.state.seedValue)\n        this.state.noiseGenerator.setPerlinNoiseDetail(this.state.lodValue, this.state.falloffValue)\n    }\n    \n    rgbToHex(value) { \n        const rgbValue = Math.round(value * 255)\n        let hex = Number(rgbValue).toString(16);\n        if (hex.length < 2) {\n            hex = \"0\" + hex;\n        }\n        return \"#\" + hex + hex + hex;\n    }\n    \n    styleForCell(hexValue) {\n        return {\n            display: 'inline-block',\n            width: '10px',\n            height: '10px',\n            // margin: '0px',\n            // padding: '0px',\n            backgroundColor: this.rgbToHex(hexValue),\n        }\n    }\n\n    render() {\n        \n        return(\n            <div className=\"container-fluid\">\n                <h1>Perlin Noise</h1>\n\n                <div className=\"row\">\n                    <div className=\"col s3 left-form\">\n\n                        <div className=\"card-panel grey lighten-4\">\n                            <label>\n                                scale ({this.state.scaleValue}) :\n                                <input type=\"range\" name=\"scaleValue\" \n                                value={this.state.scaleValue} onChange={this.handleChange}\n                                min=\"0.01\" max=\"1\" step=\"0.01\" />\n                            </label>\n                            <label>\n                                divisions ({this.state.divisionValue}) :\n                                <input type=\"range\" name=\"divisionValue\" \n                                value={this.state.divisionValue} onChange={this.handleChange}\n                                min=\"2\" max=\"192\" step=\"1\" />\n                            </label>\n                            <label>\n                                Offset ({this.state.offsetValue}) :\n                                <input type=\"range\" name=\"offsetValue\" \n                                value={this.state.offsetValue} onChange={this.handleChange}\n                                min=\"-1\" max=\"1\" step=\"0.01\" />\n                            </label>\n                        </div>\n\n                        <div className=\"card-panel grey lighten-4\">\n                            <label>\n                                Seed :\n                                <input type=\"text\" value={this.state.seedValue} onChange={this.handleChange} name=\"seedValue\"></input>\n                                {/* <input type=\"number\" value={this.state.seedValue} onChange={this.handleChange} name=\"seedValue\"></input> */}\n                            </label>\n                            <label>\n                                lod ({this.state.lodValue}) :\n                                <input type=\"range\" name=\"lodValue\" \n                                value={this.state.lodValue} onChange={this.handleChange}\n                                min=\"1\" max=\"8\" step=\"1\" />\n                            </label>\n                            <label>\n                                falloff ({this.state.falloffValue}) :\n                                <input type=\"range\" name=\"falloffValue\" \n                                value={this.state.falloffValue} onChange={this.handleChange}\n                                min=\"0.01\" max=\"1\" step=\"0.01\" />\n                            </label>\n                            {/* <button>Generate</button> */}\n                        </div>\n                    </div>\n\n                    <div className=\"col s3\">\n                    </div>\n    \n                    <div className=\"col s9\">\n                        <h3>Determined Random</h3>\n                        <code>getPerlinNoise()</code>\n                        {this.state.noiseGenerator.getPerlinNoise()}<br/>\n                        <code>getPerlinNoise(1)</code>\n                        {this.state.noiseGenerator.getPerlinNoise(1)}<br/>\n                        <code>getPerlinNoise(45.7098)</code>\n                        {this.state.noiseGenerator.getPerlinNoise(45.7098)}<br/>\n                        <code>getPerlinNoise(-45.7098)</code>\n                        {this.state.noiseGenerator.getPerlinNoise(-45.7098)}<br/>\n                        <code>getPerlinNoise(\"lol\")</code>\n                        {this.state.noiseGenerator.getPerlinNoise(\"lol\")}<br/>\n        \n                        <h3>1D noise</h3>\n                        <P5 sketch={this.state.noise1DSketch}\n                            data={{\n                                offsetValue: this.state.offsetValue,\n                                noiseScaleValue: this.state.scaleValue,\n                                divisionValue: this.state.divisionValue,\n                                getNoise: (x,y,z) => this.state.noiseGenerator.getPerlinNoise(x,y,z)\n                            }}\n                        />\n                        <h3>2D noise</h3>\n                        <P5 sketch={this.state.noise2DSketch} \n                            data={{\n                                offsetValue: this.state.offsetValue,\n                                noiseScaleValue: this.state.scaleValue,\n                                divisionValue: this.state.divisionValue,\n                                getNoise: (x,y,z) => this.state.noiseGenerator.getPerlinNoise(x,y,z)\n                            }}\n                        />\n                        {/* <h3>3D noise</h3> */}\n                    </div>\n                </div>\n\n            </div>\n        )\n    }\n}\n\nexport default Perlin","import React, {useEffect} from 'react';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\n\nimport M from 'materialize-css/dist/js/materialize.min.js'\nimport 'materialize-css/dist/css/materialize.min.css'\nimport './App.css'\n\nimport Random from './pages/random/Random'\nimport White from './pages/white/White'\nimport Perlin from './pages/perlin/Perlin'\n\nfunction App() {\n\n  useEffect(() => {\n      M.AutoInit()\n  }, [])\n\n  const links = [\n    {to: \"/random\", name: \"Random\"},\n    {to: \"/white-noise\", name: \"White Noise\"},\n    // {to: \"/pink-noise\", name: \"Pink Noise\"},\n    // {to: \"/simplex-noise\", name: \"Simplex Noise\"},\n    {to: \"/perlin-noise\", name: \"Perlin Noise\"},\n    // {to: \"/brownian-noise\", name: \"Brownian Noise\"},\n    // {to: \"/cellular-noise\", name: \"Cellular Noise\"},\n  ]\n\n  function getNavLinks() {\n    return links.map((link, linkIndex) => (\n      <li key={linkIndex}>\n        <Link to={link.to}>{link.name}</Link>\n      </li>\n    ))\n  }\n\n  return (\n    <Router>\n      <div className=\"App\">\n\n        <header>\n\n          <nav className=\"nav-extended\">\n            <div className=\"nav-wrapper\">\n              <Link to=\"/\" className=\"brand-logo right\"><i className=\"material-icons\">cloud</i>png5</Link>\n              <a href=\"#\" data-target=\"mobile-demo\" className=\"sidenav-trigger\"><i className=\"material-icons\">menu</i></a>\n\n              <ul id=\"nav-mobile\" className=\"left hide-on-med-and-down\">\n                {getNavLinks()}\n              </ul>\n            </div>\n\n            {/* <div className=\"nav-content\">\n              <span className=\"nav-title\">Title</span>\n            </div> */}\n          </nav>\n\n          <ul className=\"sidenav\" id=\"mobile-demo\">\n            {getNavLinks()}\n          </ul>\n\n        </header>\n\n        <Switch>\n          <Route path=\"/random\">\n            <Random />\n          </Route>\n          <Route path=\"/white-noise\">\n            <White />\n          </Route>\n          <Route path=\"/pink-noise\">\n            <h1>Pink Noise</h1>\n          </Route>\n          <Route path=\"/simplex-noise\">\n            <h1>Simplex Noise</h1>\n          </Route>\n          <Route path=\"/perlin-noise\">\n            <Perlin />\n          </Route>\n          <Route path=\"/brownian-noise\">\n            <h1>Brownian Noise</h1>\n          </Route>\n          <Route path=\"/cellular-noise\">\n            <h1>Cellular Noise</h1>\n          </Route>\n          <Route path=\"/*\">\n            404\n          </Route>\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}