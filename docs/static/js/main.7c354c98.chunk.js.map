{"version":3,"sources":["dist/index.js","pages/random/Random.js","wrappers/P5Wrapper.js","pages/white/noise1DSketch1.js","pages/white/noise1DSketch2.js","pages/white/noise2DSketch.js","pages/white/White.js","pages/perlin/noise1DSketch.js","pages/perlin/noise2DSketch.js","pages/perlin/Perlin.js","App.js","serviceWorker.js","index.js"],"names":["_defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","NoiseGenerator","instance","Constructor","TypeError","_classCallCheck","this","seed","computedSeed","noise","NOISE_YWRAPB","NOISE_YWRAP","NOISE_ZWRAPB","NOISE_ZWRAP","NOISE_SIZE","lcg","m","a","c","z","white","perlin_octaves","octaves","perlin_amp_falloff","falloff","setNoiseSeed","protoProps","staticProps","value","x","y","normalizeSeed","Math","random","makePositive","fract","sin","input","floor","Number","split","map","_char","charCodeAt","join","f","cos","PI","xi","yi","zi","xf","yf","zf","Array","n1","n2","r","of","scaled_cosine","rxf","ryf","n3","ampl","o","lod","prototype","module","exports","Random","state","noiseGenerator","PNG5","seedValue","computeNoises","className","Component","P5Wrapper","canvas","doesComponentReceivedData","bind","setState","p5","sketch","el","data","ref","prevData","resizeCanvas","parentWidth","parent","clientWidth","computedHeight","setup","createCanvas","draw","background","fill","width","height","push","beginShape","divisionValue","vertex","endShape","CLOSE","drawFrame","windowResized","getNoise","noiseScaleValue","scale","rectSize","noStroke","rect","White","scaleValue","noise1DSketch1","noise1DSketch2","noise2DSketch","handleChange","event","name","rgbValue","round","hex","toString","hexValue","display","backgroundColor","rgbToHex","type","onChange","min","max","step","getWhiteNoise","Perlin","lodValue","falloffValue","noise1DSketch","setPerlinNoiseDetail","getPerlinNoise","App","useEffect","M","AutoInit","links","to","getNavLinks","link","linkIndex","href","data-target","id","path","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7c354c98.chunk.js","sourcesContent":["'use strict';\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nvar NoiseGenerator =\n/*#__PURE__*/\nfunction () {\n  function NoiseGenerator(props) {\n    _classCallCheck(this, NoiseGenerator);\n\n    // GLOBAL VARIABLES\n    this.seed = null;\n    this.computedSeed = null;\n    this.noise = null; // will be initialized lazily by getNoise() or setNoiseSeed()\n\n    this.NOISE_YWRAPB = 4;\n    this.NOISE_YWRAP = 1 << this.NOISE_YWRAPB;\n    this.NOISE_ZWRAPB = 8;\n    this.NOISE_ZWRAP = 1 << this.NOISE_ZWRAPB;\n    this.NOISE_SIZE = 4095; // Linear Congruential Generator\n    // Variant of a Lehman Generator\n\n    this.lcg = {\n      // Set to values from http://en.wikipedia.org/wiki/Numerical_Recipes\n      // m is basically chosen to be large (as it is the max period)\n      // and for its relationships to a and c\n      m: 4294967296,\n      // a - 1 should be divisible by m's prime factors\n      a: 1664525,\n      // c and m should be co-prime\n      c: 1013904223,\n      z: null\n    }; // WHITE NOISE\n\n    this.white = null; // // BROWNIAN NOISE\n    // this.BROWNIAN_YWRAPB = 4\n    // this.BROWNIAN_YWRAP = 1 << this.BROWNIAN_YWRAPB\n    // this.BROWNIAN_ZWRAPB = 8\n    // this.BROWNIAN_ZWRAP = 1 << this.BROWNIAN_ZWRAPB\n    // this.BROWNIAN_SIZE = 4095\n    // this.brownian = null\n    // PERLIN NOISE    \n\n    this.perlin_octaves = props && props.octaves ? props.octaves : 4; // default to medium smooth\n\n    this.perlin_amp_falloff = props && props.falloff ? props.falloff : 0.5; // 50% reduction/octave\n    // this.perlin = null // will be initialized lazily by getNoise() or setNoiseSeed()\n    // CELLULAR NOISE\n\n    if (props && props.seed) this.setNoiseSeed(props.seed);\n  }\n\n  _createClass(NoiseGenerator, [{\n    key: \"random\",\n    value: function random(x, y, z) {\n      x = x ? this.normalizeSeed(x) : Math.random();\n      y = y ? this.normalizeSeed(y) : 0;\n      z = z ? this.normalizeSeed(z) : 0;\n      x = this.makePositive(x);\n      y = this.makePositive(y);\n      z = this.makePositive(z);\n      var output = this.fract(Math.sin(x) * 100000.0);\n      return output;\n    } // UTILS FUNCTIONS\n\n  }, {\n    key: \"fract\",\n    value: function fract(input) {\n      input = this.makePositive(input);\n      var integer = Math.floor(input);\n      var decimal = input - integer;\n      return decimal;\n    }\n  }, {\n    key: \"normalizeSeed\",\n    value: function normalizeSeed(seed) {\n      if (typeof seed != 'number') {\n        seed = Number(seed.split('').map(function (_char) {\n          return _char.charCodeAt(0);\n        }).join(''));\n      }\n\n      return seed;\n    }\n  }, {\n    key: \"makePositive\",\n    value: function makePositive(input) {\n      return input < 0 ? -input : input;\n    }\n  }, {\n    key: \"smoothStep\",\n    value: function smoothStep(f) {\n      return f * f * (3.0 - 2.0 * f);\n    }\n  }, {\n    key: \"scaled_cosine\",\n    value: function scaled_cosine(i) {\n      return 0.5 * (1.0 - Math.cos(i * Math.PI));\n    } // WHITE NOISE\n\n  }, {\n    key: \"getWhiteNoise\",\n    value: function getWhiteNoise(x, y, z) {\n      x = x || Math.random();\n      y = y || 0;\n      z = z || 0;\n      var xi = Math.floor(this.makePositive(x));\n      var yi = Math.floor(this.makePositive(y));\n      var zi = Math.floor(this.makePositive(z));\n      var xf = this.fract(x);\n      var yf = this.fract(y);\n      var zf = this.fract(z);\n      var rxf, ryf;\n\n      if (this.noise == null) {\n        this.noise = new Array(this.NOISE_SIZE + 1);\n\n        for (var i = 0; i < this.NOISE_SIZE + 1; i++) {\n          // this.noise[i] = this.random()\n          this.noise[i] = Math.random();\n        }\n      }\n\n      var r = 0;\n      var n1, n2, n3;\n      var of = xi + (yi << this.NOISE_YWRAPB) + (zi << this.NOISE_ZWRAPB);\n      rxf = this.scaled_cosine(xf);\n      ryf = this.scaled_cosine(yf);\n      n1 = this.noise[of & this.NOISE_SIZE];\n      n2 = this.noise[of + this.NOISE_YWRAP & this.NOISE_SIZE];\n      of += this.NOISE_ZWRAP;\n      n3 = this.noise[of + this.NOISE_YWRAP & this.NOISE_SIZE];\n      n1 += this.scaled_cosine(zf) * (n2 - n1); // r += n1 * ampl\n\n      r += n1;\n      return r;\n    }\n  }, {\n    key: \"setWhiteNoiseSeed\",\n    value: function setWhiteNoiseSeed(input) {} // this.white = new Array(this.NOISE_SIZE + 1)\n    // for (var i = 0; i < this.NOISE_SIZE + 1; i++) {\n    //   this.white[i] = lcg.rand()\n    // }\n    // PERLIN NOISE\n\n  }, {\n    key: \"getPerlinNoise\",\n    value: function getPerlinNoise(x, y, z) {\n      y = y || 0;\n      z = z || 0;\n\n      if (this.noise == null) {\n        this.noise = new Array(this.NOISE_SIZE + 1);\n\n        for (var i = 0; i < this.NOISE_SIZE + 1; i++) {\n          this.noise[i] = Math.random();\n        }\n      }\n\n      x = this.makePositive(x);\n      y = this.makePositive(y);\n      z = this.makePositive(z);\n      var xi = Math.floor(x),\n          yi = Math.floor(y),\n          zi = Math.floor(z);\n      var xf = x - xi;\n      var yf = y - yi;\n      var zf = z - zi;\n      var rxf, ryf;\n      var r = 0;\n      var ampl = 0.5;\n      var n1, n2, n3;\n\n      for (var o = 0; o < this.perlin_octaves; o++) {\n        var of = xi + (yi << this.NOISE_YWRAPB) + (zi << this.NOISE_ZWRAPB);\n        rxf = this.scaled_cosine(xf);\n        ryf = this.scaled_cosine(yf);\n        n1 = this.noise[of & this.NOISE_SIZE];\n        n1 += rxf * (this.noise[of + 1 & this.NOISE_SIZE] - n1);\n        n2 = this.noise[of + this.NOISE_YWRAP & this.NOISE_SIZE];\n        n2 += rxf * (this.noise[of + this.NOISE_YWRAP + 1 & this.NOISE_SIZE] - n2);\n        n1 += ryf * (n2 - n1);\n        of += this.NOISE_ZWRAP;\n        n2 = this.noise[of & this.NOISE_SIZE];\n        n2 += rxf * (this.noise[of + 1 & this.NOISE_SIZE] - n2);\n        n3 = this.noise[of + this.NOISE_YWRAP & this.NOISE_SIZE];\n        n3 += rxf * (this.noise[of + this.NOISE_YWRAP + 1 & this.NOISE_SIZE] - n3);\n        n2 += ryf * (n3 - n2);\n        n1 += this.scaled_cosine(zf) * (n2 - n1);\n        r += n1 * ampl;\n        ampl *= this.perlin_amp_falloff;\n        xi <<= 1;\n        xf *= 2;\n        yi <<= 1;\n        yf *= 2;\n        zi <<= 1;\n        zf *= 2;\n\n        if (xf >= 1.0) {\n          xi++;\n          xf--;\n        }\n\n        if (yf >= 1.0) {\n          yi++;\n          yf--;\n        }\n\n        if (zf >= 1.0) {\n          zi++;\n          zf--;\n        }\n      }\n\n      return r;\n    }\n  }, {\n    key: \"setPerlinNoiseDetail\",\n    value: function setPerlinNoiseDetail(lod, falloff) {\n      if (lod > 0) {\n        this.perlin_octaves = lod;\n      }\n\n      if (falloff > 0) {\n        this.perlin_amp_falloff = falloff;\n      }\n    }\n  }, {\n    key: \"setNoiseSeed\",\n    value: function setNoiseSeed(seed) {\n      this.seed = seed;\n      seed = this.normalizeSeed(seed); // pick a random seed if seed is undefined or null\n      // the >>> 0 casts the seed to an unsigned 32-bit integer\n\n      this.computedSeed = this.lcg.z = (seed == null ? Math.random() * this.lcg.m : seed) >>> 0;\n      this.noise = new Array(this.NOISE_SIZE + 1);\n\n      for (var i = 0; i < this.NOISE_SIZE + 1; i++) {\n        this.lcg.z = (this.lcg.a * this.lcg.z + this.lcg.c) % this.lcg.m; // define the recurrence relationship\n        // return a float in [0, 1)\n        // if this.lcg.z = m then this.lcg.z / m = 0 therefore (this.lcg.z % m) / m < 1 always\n\n        this.noise[i] = this.lcg.z / this.lcg.m;\n      }\n    }\n  }, {\n    key: \"getNoiseSeed\",\n    value: function getNoiseSeed() {\n      return this.seed;\n    }\n  }]);\n\n  return NoiseGenerator;\n}();\n\n// module.exports = require('./noise.js')\n\nmodule.exports = NoiseGenerator;\n","import React, {Component} from 'react'\n// import PNG5 from 'png5'\nimport PNG5 from '../../dist/index'\n\nclass Random extends Component {\n\n    constructor(props) {\n        super(props)\n        \n        this.state = {\n            noiseGenerator: new PNG5(),\n            seedValue: 'seed',\n        }\n\n        this.state.noiseGenerator.setNoiseSeed(this.state.seedValue)\n    }\n\n    componentDidMount() {\n        this.computeNoises()\n    }\n\n    computeNoises() {\n        this.state.noiseGenerator.setNoiseSeed(this.state.seedValue)\n    }\n    \n    render() {\n        \n        return(\n            <div className=\"container-fluid\">\n                <h1>Random</h1>\n\n                <div className=\"row\">\n                    <div className=\"col s3 left-form\">\n\n                    </div>\n    \n                    <div className=\"col s3\"></div>\n                    \n                    <div className=\"col s9\">\n                        <h3>Undetermined Random</h3>\n                        <code>random()</code>\n                        {this.state.noiseGenerator.random()}<br/>\n                        <code>random()</code>\n                        {this.state.noiseGenerator.random()}<br/>\n                        <code>random()</code>\n                        {this.state.noiseGenerator.random()}<br/>\n        \n                        <h3>Determined Random</h3>\n                        <code>random(1)</code>\n                        {this.state.noiseGenerator.random(1)}<br/>\n                        <code>random(45.7098)</code>\n                        {this.state.noiseGenerator.random(45.7098)}<br/>\n                        <code>random(-45.7098)</code>\n                        {this.state.noiseGenerator.random(-45.7098)}<br/>\n                        <code>random(\"lol\")</code>\n                        {this.state.noiseGenerator.random(\"lol\")}<br/>\n                    </div>\n                </div>\n\n            </div>\n        )\n    }\n}\n\nexport default Random","import React, {Component} from 'react'\nimport p5 from 'p5'\n// import '../../p5/addons/p5.sound.js'\n\nclass P5Wrapper extends Component {\n\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            canvas: null,\n            // canvas: new p5(this.props.sketch, this.el),\n        }\n\n        this.doesComponentReceivedData = this.doesComponentReceivedData.bind(this)\n    }\n\n    componentDidMount() {\n        this.setState({canvas: new p5(this.props.sketch, this.el)})\n        // const canvasAndData = {...new p5(this.props.sketch, this.el), data: this.props.data}\n        // this.setState({canvas: canvasAndData})\n\n        // this.doesComponentReceivedData()\n    }\n\n    componentDidUpdate() {\n        this.doesComponentReceivedData()\n        // this.forceUpdate()\n    }\n\n    doesComponentReceivedData() {\n        this.state.canvas.data = this.props.data ? this.props.data : null\n\n        // const dataObject = {data: this.props.data}\n\n        // // this.setState((prevState) => ({\n        // //     canvas: Object.assign({}, prevState.canvas, dataObject)\n        // // }))\n        \n        // // console.log('this.state.canvas', this.state.canvas)\n        // this.setState((prevState) => ({\n        //     canvas: {\n        //         ...prevState.canvas,\n        //         ...dataObject\n        //     }\n        // }))\n        // // console.log('this.state.canvas', this.state.canvas)\n    }\n\n    render() {\n        return (\n            <div className=\"sketch\" ref={(el) => {this.el = el}}></div>\n        )\n    }\n}\n\nexport default P5Wrapper","export default (p5) => {\n    let canvas = null\n    const scale = 0.05\n    // const scale = 1\n\n    let prevData = null\n    let noise = []\n\n    p5.setup = function() {\n        canvas = p5.createCanvas(0,0)\n        resizeCanvas()\n    }\n  \n    p5.draw = function() {\n        if(p5.data && p5.data !== prevData) {\n            drawFrame()\n            prevData = p5.data            \n        }\n    }\n\n    function drawFrame() {\n\n        p5.background(51)\n\n        if(p5.data) {\n\n            p5.fill(255)\n\n            for (let x = 0; x <= p5.width; x += p5.width/64) {\n                const y = p5.map(1 - p5.data.random(), 0, 1, 0, p5.height)\n                noise.push({x: x, y: y})\n            }\n\n            p5.beginShape()\n\n            // noise.forEach((cell) => {\n            //     p5.vertex(cell.x, cell.y)\n            // })\n\n            // console.log('p5.data.divisionValue', p5.data.divisionValue)\n            // console.log('p5.width', p5.width)\n            // console.log('p5.height', p5.height)\n            // console.log('p5.width/p5.data.divisionValue', p5.width/p5.data.divisionValue)\n            \n            for (let x = 0; x <= p5.width; x += p5.width/p5.data.divisionValue) {\n                \n                // console.log('x * p5.width/p5.data.divisionValue', x * p5.width/p5.data.divisionValue)\n                // console.log('Math.floor(x * p5.width/p5.data.divisionValue/64)', Math.floor(x * p5.width/p5.data.divisionValue/64))\n                \n                const y = noise[Math.floor(x * p5.width/p5.data.divisionValue/64)]\n                \n                // console.log('y', y)\n                \n                p5.vertex(x, y)\n            }\n            \n            p5.vertex(p5.width, p5.height)\n            p5.vertex(0, p5.height)\n            p5.endShape(p5.CLOSE)\n\n        }\n    }\n\n    function resizeCanvas() {\n        const coef = 0.75\n        const parentWidth = canvas.parent().clientWidth * coef\n        const computedHeight = parentWidth * (9/16)\n        p5.resizeCanvas(parentWidth, computedHeight)\n    }\n    p5.windowResized = function() {\n        resizeCanvas()\n    }\n}","export default (p5) => {\n    let canvas = null\n    // const scale = 0.05\n    const scale = 1\n    // const scale = 10\n\n    p5.setup = function() {\n        canvas = p5.createCanvas(0,0)\n        resizeCanvas()\n    }\n  \n    p5.draw = function() {\n        p5.background(51)\n\n        if(p5.data) {\n\n            p5.fill(255)\n\n            p5.beginShape()\n\n            for (let x = 0; x <= p5.width; x += p5.width/p5.data.divisionValue) {\n                let y = p5.map(1 - p5.data.getNoise(x * p5.data.noiseScaleValue * scale), 0, 1, 0, p5.height)\n                p5.vertex(x, y)\n            }\n            \n            p5.vertex(p5.width, p5.height)\n            p5.vertex(0, p5.height)\n            p5.endShape(p5.CLOSE)\n\n        }\n    }\n\n    function resizeCanvas() {\n        const coef = 0.75\n        const parentWidth = canvas.parent().clientWidth * coef\n        const computedHeight = parentWidth * (9/16)\n        p5.resizeCanvas(parentWidth, computedHeight)\n    }\n    p5.windowResized = function() {\n        resizeCanvas()\n    }\n}","export default (p5) => {\n    let canvas = null\n    // const scale = 0.05\n    const scale = 1\n    // const scale = 10\n\n    let prevData = null\n\n    p5.setup = function() {\n        canvas = p5.createCanvas(0,0)\n        resizeCanvas()\n        // drawFrame()\n    }\n  \n    p5.draw = function() {\n        if(p5.data && p5.data !== prevData) {\n            drawFrame()\n            prevData = p5.data            \n        }\n    }\n\n    function drawFrame() {\n\n        const rectSize = p5.width / p5.data.divisionValue\n\n        p5.noStroke()\n\n        for (var x = 0; x < p5.width; x += rectSize) {\n            for (var y = 0; y < p5.height; y += rectSize) {\n              p5.fill(p5.data.getNoise(x * p5.data.noiseScaleValue * scale, y * p5.data.noiseScaleValue * scale) * 255)\n              p5.rect(x, y, rectSize, rectSize)\n            }\n        }\n    }\n\n    p5.windowResized = function() {\n        resizeCanvas()\n        drawFrame()\n    }\n    function resizeCanvas() {\n        const coef = 0.75\n        const parentWidth = canvas.parent().clientWidth * coef\n        const computedHeight = parentWidth * (9/16)\n        p5.resizeCanvas(parentWidth, computedHeight)\n    }\n}","import React, {Component} from 'react'\n// import PNG5 from 'png5'\nimport PNG5 from '../../dist/index'\n\nimport P5 from '../../wrappers/P5Wrapper'\nimport noise1DSketch1 from './noise1DSketch1'\nimport noise1DSketch2 from './noise1DSketch2'\nimport noise2DSketch from './noise2DSketch'\n\nclass White extends Component {\n\n    constructor(props) {\n        super(props)\n        \n        this.state = {\n            noiseGenerator: new PNG5(),\n            \n            // scaleValue: 1,\n            scaleValue: 0.3,\n            divisionValue: 48,\n            seedValue: 'seed',\n\n            // lodValue: 4,\n            // falloffValue: 0.5,\n            \n            noise1DSketch1: noise1DSketch1,\n            noise1DSketch2: noise1DSketch2,\n            noise2DSketch: noise2DSketch,\n        }\n\n        this.state.noiseGenerator.setNoiseSeed(this.state.seedValue)\n\n        this.handleChange = this.handleChange.bind(this)\n    }\n\n    componentDidMount() {\n        this.computeNoises()\n    }\n\n    onUpdate() {\n    // componentDidUpdate() {\n        this.computeNoises()\n    }\n\n    handleChange(event) {\n        const {name, value} = event.target\n        this.setState({[name]: value})\n        this.computeNoises()\n    }\n\n    computeNoises() {\n        this.state.noiseGenerator.setNoiseSeed(this.state.seedValue)\n    }\n    \n    rgbToHex(value) { \n        const rgbValue = Math.round(value * 255)\n        let hex = Number(rgbValue).toString(16);\n        if (hex.length < 2) {\n            hex = \"0\" + hex;\n        }\n        return \"#\" + hex + hex + hex;\n    }\n    \n    styleForCell(hexValue) {\n        return {\n            display: 'inline-block',\n            width: '10px',\n            height: '10px',\n            // margin: '0px',\n            // padding: '0px',\n            backgroundColor: this.rgbToHex(hexValue),\n        }\n    }\n\n    render() {\n        \n        return(\n            <div className=\"container-fluid\">\n                <h1>White Noise</h1>\n\n                <div className=\"row\">\n                    <div className=\"col s3 left-form\">\n                        <label>\n                            scale ({this.state.scaleValue}) :\n                            <input type=\"range\" name=\"scaleValue\" \n                            value={this.state.scaleValue} onChange={this.handleChange}\n                            min=\"0.01\" max=\"1\" step=\"0.01\" />\n                        </label>\n                        <label>\n                            divisions ({this.state.divisionValue}) :\n                            <input type=\"range\" name=\"divisionValue\" \n                            value={this.state.divisionValue} onChange={this.handleChange}\n                            min=\"2\" max=\"128\" step=\"1\" />\n                        </label>\n                        <label>\n                            Seed :\n                            <input type=\"text\" value={this.state.seedValue} onChange={this.handleChange} name=\"seedValue\"></input>\n                            {/* <input type=\"number\" value={this.state.seedValue} onChange={this.handleChange} name=\"seedValue\"></input> */}\n                        </label>\n                        {/* <label>\n                            lod ({this.state.lodValue}) :\n                            <input type=\"range\" name=\"lodValue\" \n                            value={this.state.lodValue} onChange={this.handleChange}\n                            min=\"1\" max=\"8\" step=\"1\" />\n                        </label>\n                        <label>\n                            falloff ({this.state.falloffValue}) :\n                            <input type=\"range\" name=\"falloffValue\" \n                            value={this.state.falloffValue} onChange={this.handleChange}\n                            min=\"0.01\" max=\"1\" step=\"0.01\" />\n                        </label> */}\n                        {/* <button>Generate</button> */}\n                    </div>\n    \n                    <div className=\"col s3\"></div>\n                    \n                    <div className=\"col s9\">\n        \n                        <h3>Determined Random</h3>\n                        <code>getWhiteNoise(1)</code>\n                        {this.state.noiseGenerator.getWhiteNoise(1)}<br/>\n                        <code>getWhiteNoise(45.7098)</code>\n                        {this.state.noiseGenerator.getWhiteNoise(45.7098)}<br/>\n                        <code>getWhiteNoise(-45.7098)</code>\n                        {this.state.noiseGenerator.getWhiteNoise(-45.7098)}<br/>\n                        <code>getWhiteNoise(\"lol\")</code>\n                        {this.state.noiseGenerator.getWhiteNoise(\"lol\")}<br/>\n        \n                        <h3>1D noise</h3>\n                        {/* <h3>Undetermined Random</h3>\n                        <P5 sketch={this.state.noise1DSketch1}\n                            data={{\n                                noiseScaleValue: this.state.scaleValue,\n                                divisionValue: this.state.divisionValue,\n                                random: (x,y,z) => this.state.noiseGenerator.random(x,y,z)\n                            }}\n                        />\n                        <h3>Determined Random</h3> */}\n                        <P5 sketch={this.state.noise1DSketch2}\n                            data={{\n                                noiseScaleValue: this.state.scaleValue,\n                                divisionValue: this.state.divisionValue,\n                                random: (x,y,z) => this.state.noiseGenerator.random(x,y,z),\n                                getNoise: (x,y,z) => this.state.noiseGenerator.getWhiteNoise(x,y,z)\n                            }}\n                        />\n                        <h3>2D noise</h3>\n                        <P5 sketch={this.state.noise2DSketch} \n                            data={{\n                                noiseScaleValue: this.state.scaleValue,\n                                divisionValue: this.state.divisionValue,\n                                getNoise: (x,y,z) => this.state.noiseGenerator.getNoise(x,y,z),\n                                getNoise: (x,y,z) => this.state.noiseGenerator.getWhiteNoise(x,y,z)\n                            }}\n                        />\n                        {/* <h3>3D noise</h3> */}\n                    </div>\n                </div>\n\n            </div>\n        )\n    }\n}\n\nexport default White","export default (p5) => {\n    let canvas = null\n    const scale = 0.05\n\n    p5.setup = function() {\n        canvas = p5.createCanvas(0,0)\n        resizeCanvas()\n    }\n  \n    p5.draw = function() {\n        p5.background(51)\n\n        if(p5.data) {\n\n            p5.fill(255)\n\n            p5.beginShape()\n\n            for (let x = 0; x <= p5.width; x += p5.width/p5.data.divisionValue) {\n                let y = p5.map(1 - p5.data.getNoise(x * p5.data.noiseScaleValue * scale), 0, 1, 0, p5.height)\n                p5.vertex(x, y)\n            }\n            \n            p5.vertex(p5.width, p5.height)\n            p5.vertex(0, p5.height)\n            p5.endShape(p5.CLOSE)\n\n        }\n    }\n\n    function resizeCanvas() {\n        const coef = 0.75\n        const parentWidth = canvas.parent().clientWidth * coef\n        const computedHeight = parentWidth * (9/16)\n        p5.resizeCanvas(parentWidth, computedHeight)\n    }\n    p5.windowResized = function() {\n        resizeCanvas()\n    }\n}","export default (p5) => {\n    let canvas = null\n    const scale = 0.05\n\n    let prevData = null\n\n    p5.setup = function() {\n        canvas = p5.createCanvas(0,0)\n        resizeCanvas()\n        // drawFrame()\n    }\n  \n    p5.draw = function() {\n        if(p5.data && p5.data !== prevData) {\n            drawFrame()\n            prevData = p5.data            \n        }\n    }\n\n    function drawFrame() {\n\n        const rectSize = p5.width / p5.data.divisionValue\n\n        p5.noStroke()\n        for (var x = 0; x < p5.width; x += rectSize) {\n            for (var y = 0; y < p5.height; y += rectSize) {\n              p5.fill(p5.data.getNoise(x * p5.data.noiseScaleValue * scale, y * p5.data.noiseScaleValue * scale) * 255)\n              p5.rect(x, y, rectSize, rectSize)\n            }\n        }\n    }\n\n    p5.windowResized = function() {\n        resizeCanvas()\n        drawFrame()\n    }\n    function resizeCanvas() {\n        const coef = 0.75\n        const parentWidth = canvas.parent().clientWidth * coef\n        const computedHeight = parentWidth * (9/16)\n        p5.resizeCanvas(parentWidth, computedHeight)\n    }\n}","import React, {Component} from 'react'\n// import PNG5 from 'png5'\nimport PNG5 from '../../dist/index'\n\nimport P5 from '../../wrappers/P5Wrapper'\nimport noise1DSketch from './noise1DSketch'\nimport noise2DSketch from './noise2DSketch'\n\nclass Perlin extends Component {\n\n    constructor(props) {\n        super(props)\n        \n        this.state = {\n            noiseGenerator: new PNG5(),\n\n            // scaleValue: 1,\n            scaleValue: 0.3,\n            divisionValue: 48,\n            seedValue: 'seed',\n            lodValue: 4,\n            falloffValue: 0.5,\n            \n            noise1DSketch: noise1DSketch,\n            noise2DSketch: noise2DSketch,\n        }\n\n        this.state.noiseGenerator.setNoiseSeed(this.state.seedValue)\n\n        this.handleChange = this.handleChange.bind(this)\n    }\n\n    componentDidMount() {\n        this.computeNoises()\n    }\n\n    onUpdate() {\n    // componentDidUpdate() {\n        this.computeNoises()\n    }\n\n    handleChange(event) {\n        const {name, value} = event.target\n        this.setState({[name]: value})\n        this.computeNoises()\n    }\n\n    computeNoises() {\n        this.state.noiseGenerator.setNoiseSeed(this.state.seedValue)\n        this.state.noiseGenerator.setPerlinNoiseDetail(this.state.lodValue, this.state.falloffValue)\n    }\n    \n    rgbToHex(value) { \n        const rgbValue = Math.round(value * 255)\n        let hex = Number(rgbValue).toString(16);\n        if (hex.length < 2) {\n            hex = \"0\" + hex;\n        }\n        return \"#\" + hex + hex + hex;\n    }\n    \n    styleForCell(hexValue) {\n        return {\n            display: 'inline-block',\n            width: '10px',\n            height: '10px',\n            // margin: '0px',\n            // padding: '0px',\n            backgroundColor: this.rgbToHex(hexValue),\n        }\n    }\n\n    render() {\n        \n        return(\n            <div className=\"container-fluid\">\n                <h1>Perlin Noise</h1>\n\n                <div className=\"row\">\n                    <div className=\"col s3 left-form\">\n                        <label>\n                            scale ({this.state.scaleValue}) :\n                            <input type=\"range\" name=\"scaleValue\" \n                            value={this.state.scaleValue} onChange={this.handleChange}\n                            min=\"0.01\" max=\"1\" step=\"0.01\" />\n                        </label>\n                        <label>\n                            divisions ({this.state.divisionValue}) :\n                            <input type=\"range\" name=\"divisionValue\" \n                            value={this.state.divisionValue} onChange={this.handleChange}\n                            min=\"2\" max=\"128\" step=\"1\" />\n                        </label>\n                        <label>\n                            Seed :\n                            <input type=\"text\" value={this.state.seedValue} onChange={this.handleChange} name=\"seedValue\"></input>\n                            {/* <input type=\"number\" value={this.state.seedValue} onChange={this.handleChange} name=\"seedValue\"></input> */}\n                        </label>\n                        <label>\n                            lod ({this.state.lodValue}) :\n                            <input type=\"range\" name=\"lodValue\" \n                            value={this.state.lodValue} onChange={this.handleChange}\n                            min=\"1\" max=\"8\" step=\"1\" />\n                        </label>\n                        <label>\n                            falloff ({this.state.falloffValue}) :\n                            <input type=\"range\" name=\"falloffValue\" \n                            value={this.state.falloffValue} onChange={this.handleChange}\n                            min=\"0.01\" max=\"1\" step=\"0.01\" />\n                        </label>\n                        {/* <button>Generate</button> */}\n                    </div>\n\n                    <div className=\"col s3\">\n                    </div>\n    \n                    <div className=\"col s9\">\n                        <h3>Determined Random</h3>\n                        <code>getPerlinNoise()</code>\n                        {this.state.noiseGenerator.getPerlinNoise()}<br/>\n                        <code>getPerlinNoise(1)</code>\n                        {this.state.noiseGenerator.getPerlinNoise(1)}<br/>\n                        <code>getPerlinNoise(45.7098)</code>\n                        {this.state.noiseGenerator.getPerlinNoise(45.7098)}<br/>\n                        <code>getPerlinNoise(-45.7098)</code>\n                        {this.state.noiseGenerator.getPerlinNoise(-45.7098)}<br/>\n                        <code>getPerlinNoise(\"lol\")</code>\n                        {this.state.noiseGenerator.getPerlinNoise(\"lol\")}<br/>\n        \n                        <h3>1D noise</h3>\n                        <P5 sketch={this.state.noise1DSketch}\n                            data={{\n                                noiseScaleValue: this.state.scaleValue,\n                                divisionValue: this.state.divisionValue,\n                                getNoise: (x,y,z) => this.state.noiseGenerator.getPerlinNoise(x,y,z)\n                            }}\n                        />\n                        <h3>2D noise</h3>\n                        <P5 sketch={this.state.noise2DSketch} \n                            data={{\n                                noiseScaleValue: this.state.scaleValue,\n                                divisionValue: this.state.divisionValue,\n                                getNoise: (x,y,z) => this.state.noiseGenerator.getPerlinNoise(x,y,z)\n                            }}\n                        />\n                        <h3>3D noise</h3>\n                    </div>\n                </div>\n\n            </div>\n        )\n    }\n}\n\nexport default Perlin","import React, {useEffect} from 'react';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\n\nimport M from 'materialize-css/dist/js/materialize.min.js'\nimport 'materialize-css/dist/css/materialize.min.css'\nimport './App.css'\n\nimport Random from './pages/random/Random'\nimport White from './pages/white/White'\nimport Perlin from './pages/perlin/Perlin'\n\nfunction App() {\n\n  useEffect(() => {\n      M.AutoInit()\n  }, [])\n\n  const links = [\n    {to: \"/random\", name: \"Random\"},\n    {to: \"/white-noise\", name: \"White Noise\"},\n    // {to: \"/pink-noise\", name: \"Pink Noise\"},\n    {to: \"/perlin-noise\", name: \"Perlin Noise\"},\n    // {to: \"/brownian-noise\", name: \"Brownian Noise\"},\n    // {to: \"/cellular-noise\", name: \"Cellular Noise\"},\n  ]\n\n  function getNavLinks() {\n    return links.map((link, linkIndex) => (\n      <li key={linkIndex}>\n        <Link to={link.to}>{link.name}</Link>\n      </li>\n    ))\n  }\n\n  return (\n    <Router>\n      <div className=\"App\">\n\n        <header>\n\n          <nav className=\"nav-extended\">\n            <div className=\"nav-wrapper\">\n              <Link to=\"/\" className=\"brand-logo right\"><i className=\"material-icons\">cloud</i>png5</Link>\n              <a href=\"#\" data-target=\"mobile-demo\" className=\"sidenav-trigger\"><i className=\"material-icons\">menu</i></a>\n\n              <ul id=\"nav-mobile\" className=\"left hide-on-med-and-down\">\n                {getNavLinks()}\n              </ul>\n            </div>\n\n            {/* <div className=\"nav-content\">\n              <span className=\"nav-title\">Title</span>\n            </div> */}\n          </nav>\n\n          <ul className=\"sidenav\" id=\"mobile-demo\">\n            {getNavLinks()}\n          </ul>\n\n        </header>\n\n        <Switch>\n          <Route path=\"/random\">\n            <Random />\n          </Route>\n          <Route path=\"/white-noise\">\n            <White />\n          </Route>\n          <Route path=\"/pink-noise\">\n            <h1>Pink Noise</h1>\n          </Route>\n          <Route path=\"/perlin-noise\">\n            <Perlin />\n          </Route>\n          <Route path=\"/brownian-noise\">\n            <h1>Brownian Noise</h1>\n          </Route>\n          <Route path=\"/cellular-noise\">\n            <h1>Cellular Noise</h1>\n          </Route>\n          <Route path=\"/*\">\n            404\n          </Route>\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}