{"version":3,"sources":["dist/index.js","wrappers/P5Wrapper.js","pages/random/Random.js","pages/white/noise1DSketch2.js","pages/white/noise2DSketch.js","pages/white/noise3DSketch.js","pages/white/White.js","pages/perlin/noise1DSketch.js","pages/perlin/noise2DSketch.js","pages/perlin/noise3DSketch.js","pages/perlin/Perlin.js","pages/flow/flowSketch.js","pages/flow/Flow.js","App.js","serviceWorker.js","index.js"],"names":["_defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","utils","fract","input","this","makePositive","Math","floor","normalizeSeed","seed","Number","split","map","_char","charCodeAt","join","smoothStep","f","scaled_cosine","cos","PI","NoiseGenerator","instance","Constructor","TypeError","_classCallCheck","computedSeed","noise","NOISE_YWRAPB","NOISE_YWRAP","NOISE_ZWRAPB","NOISE_ZWRAP","NOISE_SIZE","lcg","m","a","c","z","white","perlin_octaves","octaves","perlin_amp_falloff","falloff","setNoiseSeed","protoProps","staticProps","value","x","y","random","sin","xi","yi","zi","zf","Array","n1","n2","r","of","rxf","ryf","n3","xf","yf","ampl","o","lod","prototype","module","exports","P5Wrapper","state","canvas","doesComponentReceivedData","bind","setState","p5","sketch","el","data","className","ref","Component","Random","noiseGenerator","PNG5","seedValue","computeNoises","scale","prevData","drawFrame","background","fill","beginShape","width","divisionValue","getNoise","noiseScaleValue","height","vertex","offsetValue","endShape","CLOSE","resizeCanvas","parentWidth","parent","clientWidth","computedHeight","setup","createCanvas","draw","windowResized","rectSize","noStroke","rect","mesh","Mesh","verteces","createVector","size","resolution","v1","v2","sliceSize","dist","ax","ay","az","noiseHeight","push","makeVertexForAFace","bx","by","bz","cx","cy","cz","dx","dy","dz","ex","ey","ez","fx","fy","fz","stroke","directionalLight","ambientMaterial","vert_A","vert_B","vert_C","pop","init","rotateX","translate","WEBGL","White","scaleValue","noise1DSketch2","noise2DSketch","noise3DSketch","handleChange","event","name","setPerlinNoiseDetail","lodValue","falloffValue","type","onChange","min","max","step","getWhiteNoise","Perlin","noise1DSketch","rgbValue","round","hex","toString","hexValue","display","backgroundColor","rgbToHex","getPerlinNoise","fr","color","particlesColor","vectors","particles","Particles","pos","vel","position","velocity","acceleration","setAlpha","alphaValue","add","limit","particlesMaxSpeedValue","mult","force","strokeWeight","particlesStrokeWeightValue","point","initParticles","particlesNumberValue","particlesStrokeColorValue","noiseValue","millis","timeScaleValue","drawCell","cellVector","p","Vector","fromAngle","TWO_PI","noiseAppCoefValue","drawVector","particle","edges","applyForce","update","drawParticles","showNoise","rotate","heading","line","createP","html","frameRate","startSimulation","showParticles","flowSketch","handleStart","handleCheckboxChange","callback","defaultChecked","onClick","trigger","App","urlPrefix","useEffect","M","AutoInit","links","to","getNavLinks","link","linkIndex","basename","href","data-target","id","path","Flow","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.48774137.chunk.js","sourcesContent":["'use strict';\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction fract(input) {\n  input = this.makePositive(input);\n  var integer = Math.floor(input);\n  var decimal = input - integer;\n  return decimal;\n}\n\nfunction normalizeSeed(seed) {\n  if (typeof seed != 'number') {\n    seed = Number(seed.split('').map(function (_char) {\n      return _char.charCodeAt(0);\n    }).join(''));\n  }\n\n  return seed;\n}\n\nfunction makePositive(input) {\n  return input < 0 ? -input : input;\n}\n\nfunction smoothStep(f) {\n  return f * f * (3.0 - 2.0 * f);\n}\n\nfunction scaled_cosine(i) {\n  return 0.5 * (1.0 - Math.cos(i * Math.PI));\n}\n\nvar utils = {\n  fract: fract,\n  normalizeSeed: normalizeSeed,\n  makePositive: makePositive,\n  smoothStep: smoothStep,\n  scaled_cosine: scaled_cosine\n};\n\nvar NoiseGenerator =\n/*#__PURE__*/\nfunction () {\n  function NoiseGenerator(props) {\n    _classCallCheck(this, NoiseGenerator);\n\n    // GLOBAL VARIABLES\n    this.seed = null;\n    this.computedSeed = null;\n    this.noise = null; // will be initialized lazily by getNoise() or setNoiseSeed()\n\n    this.NOISE_YWRAPB = 4;\n    this.NOISE_YWRAP = 1 << this.NOISE_YWRAPB;\n    this.NOISE_ZWRAPB = 8;\n    this.NOISE_ZWRAP = 1 << this.NOISE_ZWRAPB;\n    this.NOISE_SIZE = 4095; // Linear Congruential Generator\n    // Variant of a Lehman Generator\n\n    this.lcg = {\n      // Set to values from http://en.wikipedia.org/wiki/Numerical_Recipes\n      // m is basically chosen to be large (as it is the max period)\n      // and for its relationships to a and c\n      m: 4294967296,\n      // a - 1 should be divisible by m's prime factors\n      a: 1664525,\n      // c and m should be co-prime\n      c: 1013904223,\n      z: null\n    }; // WHITE NOISE\n\n    this.white = null; // // BROWNIAN NOISE\n    // this.BROWNIAN_YWRAPB = 4\n    // this.BROWNIAN_YWRAP = 1 << this.BROWNIAN_YWRAPB\n    // this.BROWNIAN_ZWRAPB = 8\n    // this.BROWNIAN_ZWRAP = 1 << this.BROWNIAN_ZWRAPB\n    // this.BROWNIAN_SIZE = 4095\n    // this.brownian = null\n    // PERLIN NOISE    \n\n    this.perlin_octaves = props && props.octaves ? props.octaves : 4; // default to medium smooth\n\n    this.perlin_amp_falloff = props && props.falloff ? props.falloff : 0.5; // 50% reduction/octave\n    // this.perlin = null // will be initialized lazily by getNoise() or setNoiseSeed()\n    // CELLULAR NOISE\n\n    if (props && props.seed) this.setNoiseSeed(props.seed);\n  }\n\n  _createClass(NoiseGenerator, [{\n    key: \"random\",\n    value: function random(x, y, z) {\n      x = x ? utils.normalizeSeed(x) : Math.random();\n      y = y ? utils.normalizeSeed(y) : 0;\n      z = z ? utils.normalizeSeed(z) : 0;\n      x = utils.makePositive(x);\n      y = utils.makePositive(y);\n      z = utils.makePositive(z);\n      var output = utils.fract(Math.sin(x) * 100000.0);\n      return output;\n    } // WHITE NOISE\n\n  }, {\n    key: \"getWhiteNoise\",\n    value: function getWhiteNoise(x, y, z) {\n      x = x || Math.random();\n      y = y || 0;\n      z = z || 0; // let vector = null\n      // if(x && y && z) {\n      //   vector  = new vectors.Vect3(x, y, z)\n      // } else if (x && y) {\n      //   vector = new vectors.Vect2(x, y)\n      // } else if (x) {\n      //   vector = this.random()\n      // } else {\n      //   vector = 'WTF'\n      // }\n      // console.log('vector : ', vector)\n\n      var xi = Math.floor(utils.makePositive(x));\n      var yi = Math.floor(utils.makePositive(y));\n      var zi = Math.floor(utils.makePositive(z));\n      var xf = utils.fract(x);\n      var yf = utils.fract(y);\n      var zf = utils.fract(z);\n\n      if (this.noise == null) {\n        this.noise = new Array(this.NOISE_SIZE + 1);\n\n        for (var i = 0; i < this.NOISE_SIZE + 1; i++) {\n          // this.noise[i] = this.random()\n          this.noise[i] = Math.random();\n        }\n      }\n\n      var r = 0;\n      var n1, n2, n3;\n      var of = xi + (yi << this.NOISE_YWRAPB) + (zi << this.NOISE_ZWRAPB);\n      n1 = this.noise[of & this.NOISE_SIZE];\n      n2 = this.noise[of + this.NOISE_YWRAP & this.NOISE_SIZE];\n      of += this.NOISE_ZWRAP;\n      n3 = this.noise[of + this.NOISE_YWRAP & this.NOISE_SIZE];\n      n1 += utils.scaled_cosine(zf) * (n2 - n1); // r += n1 * ampl\n\n      r += n1;\n      return r;\n    }\n  }, {\n    key: \"setWhiteNoiseSeed\",\n    value: function setWhiteNoiseSeed(input) {} // this.white = new Array(this.NOISE_SIZE + 1)\n    // for (var i = 0; i < this.NOISE_SIZE + 1; i++) {\n    //   this.white[i] = lcg.rand()\n    // }\n    // PERLIN NOISE\n\n  }, {\n    key: \"getPerlinNoise\",\n    value: function getPerlinNoise(x, y, z) {\n      y = y || 0;\n      z = z || 0;\n\n      if (this.noise == null) {\n        this.noise = new Array(this.NOISE_SIZE + 1);\n\n        for (var i = 0; i < this.NOISE_SIZE + 1; i++) {\n          this.noise[i] = Math.random();\n        }\n      }\n\n      x = utils.makePositive(x);\n      y = utils.makePositive(y);\n      z = utils.makePositive(z);\n      var xi = Math.floor(x),\n          yi = Math.floor(y),\n          zi = Math.floor(z);\n      var xf = x - xi;\n      var yf = y - yi;\n      var zf = z - zi;\n      var rxf, ryf;\n      var r = 0;\n      var ampl = 0.5;\n      var n1, n2, n3;\n\n      for (var o = 0; o < this.perlin_octaves; o++) {\n        var of = xi + (yi << this.NOISE_YWRAPB) + (zi << this.NOISE_ZWRAPB);\n        rxf = utils.scaled_cosine(xf);\n        ryf = utils.scaled_cosine(yf);\n        n1 = this.noise[of & this.NOISE_SIZE];\n        n1 += rxf * (this.noise[of + 1 & this.NOISE_SIZE] - n1);\n        n2 = this.noise[of + this.NOISE_YWRAP & this.NOISE_SIZE];\n        n2 += rxf * (this.noise[of + this.NOISE_YWRAP + 1 & this.NOISE_SIZE] - n2);\n        n1 += ryf * (n2 - n1);\n        of += this.NOISE_ZWRAP;\n        n2 = this.noise[of & this.NOISE_SIZE];\n        n2 += rxf * (this.noise[of + 1 & this.NOISE_SIZE] - n2);\n        n3 = this.noise[of + this.NOISE_YWRAP & this.NOISE_SIZE];\n        n3 += rxf * (this.noise[of + this.NOISE_YWRAP + 1 & this.NOISE_SIZE] - n3);\n        n2 += ryf * (n3 - n2);\n        n1 += utils.scaled_cosine(zf) * (n2 - n1);\n        r += n1 * ampl;\n        ampl *= this.perlin_amp_falloff;\n        xi <<= 1;\n        xf *= 2;\n        yi <<= 1;\n        yf *= 2;\n        zi <<= 1;\n        zf *= 2;\n\n        if (xf >= 1.0) {\n          xi++;\n          xf--;\n        }\n\n        if (yf >= 1.0) {\n          yi++;\n          yf--;\n        }\n\n        if (zf >= 1.0) {\n          zi++;\n          zf--;\n        }\n      }\n\n      return r;\n    }\n  }, {\n    key: \"setPerlinNoiseDetail\",\n    value: function setPerlinNoiseDetail(lod, falloff) {\n      if (lod > 0) {\n        this.perlin_octaves = lod;\n      }\n\n      if (falloff > 0) {\n        this.perlin_amp_falloff = falloff;\n      }\n    }\n  }, {\n    key: \"setNoiseSeed\",\n    value: function setNoiseSeed(seed) {\n      this.seed = seed;\n      seed = utils.normalizeSeed(seed); // pick a random seed if seed is undefined or null\n      // the >>> 0 casts the seed to an unsigned 32-bit integer\n\n      this.computedSeed = this.lcg.z = (seed == null ? Math.random() * this.lcg.m : seed) >>> 0;\n      this.noise = new Array(this.NOISE_SIZE + 1);\n\n      for (var i = 0; i < this.NOISE_SIZE + 1; i++) {\n        this.lcg.z = (this.lcg.a * this.lcg.z + this.lcg.c) % this.lcg.m; // define the recurrence relationship\n        // return a float in [0, 1)\n        // if this.lcg.z = m then this.lcg.z / m = 0 therefore (this.lcg.z % m) / m < 1 always\n\n        this.noise[i] = this.lcg.z / this.lcg.m;\n      }\n    }\n  }, {\n    key: \"getNoiseSeed\",\n    value: function getNoiseSeed() {\n      return this.seed;\n    }\n  }]);\n\n  return NoiseGenerator;\n}();\n\n// module.exports = require('./noise.js')\n\nmodule.exports = NoiseGenerator;\n","import React, {Component} from 'react'\nimport p5 from 'p5'\n// import '../../p5/addons/p5.sound.js'\n\nclass P5Wrapper extends Component {\n\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            canvas: null,\n            // classes: p5,\n            // canvas: new p5(this.props.sketch, this.el),\n        }\n\n        this.doesComponentReceivedData = this.doesComponentReceivedData.bind(this)\n    }\n\n    componentDidMount() {\n        this.setState({canvas: new p5(this.props.sketch, this.el)})\n        // const canvasAndData = {...new p5(this.props.sketch, this.el), data: this.props.data}\n        // this.setState({canvas: canvasAndData})\n\n        // this.doesComponentReceivedData()\n    }\n\n    componentDidUpdate() {\n        this.doesComponentReceivedData()\n        // this.forceUpdate()\n    }\n\n    doesComponentReceivedData() {\n        this.state.canvas.data = this.props.data ? this.props.data : null\n        // this.state.canvas.classes = this.state.classes ? this.state.classes : null\n\n        // const dataObject = {data: this.props.data}\n\n        // // this.setState((prevState) => ({\n        // //     canvas: Object.assign({}, prevState.canvas, dataObject)\n        // // }))\n        \n        // // console.log('this.state.canvas', this.state.canvas)\n        // this.setState((prevState) => ({\n        //     canvas: {\n        //         ...prevState.canvas,\n        //         ...dataObject\n        //     }\n        // }))\n        // // console.log('this.state.canvas', this.state.canvas)\n    }\n\n    render() {\n        return (\n            <div className=\"sketch\" ref={(el) => {this.el = el}}></div>\n        )\n    }\n}\n\nexport default P5Wrapper","import React, {Component} from 'react'\n// import PNG5 from 'png5'\nimport PNG5 from '../../dist/index'\n\nclass Random extends Component {\n\n    constructor(props) {\n        super(props)\n        \n        this.state = {\n            noiseGenerator: new PNG5(),\n            seedValue: 'seed',\n        }\n\n        this.state.noiseGenerator.setNoiseSeed(this.state.seedValue)\n    }\n\n    componentDidMount() {\n        this.computeNoises()\n    }\n\n    computeNoises() {\n        this.state.noiseGenerator.setNoiseSeed(this.state.seedValue)\n    }\n    \n    render() {\n        \n        return(\n            <div className=\"container-fluid\">\n                <h1>Random</h1>\n\n                <div className=\"row\">\n                    <div className=\"col s3 left-form\">\n                    </div>\n                    \n                    <div className=\"col s9\">\n                        <h3>Undetermined Random</h3>\n                        <code>random()</code>\n                        {this.state.noiseGenerator.random()}<br/>\n                        <code>random()</code>\n                        {this.state.noiseGenerator.random()}<br/>\n                        <code>random()</code>\n                        {this.state.noiseGenerator.random()}<br/>\n        \n                        <h3>Determined Random</h3>\n                        <code>random(1)</code>\n                        {this.state.noiseGenerator.random(1)}<br/>\n                        <code>random(45.7098)</code>\n                        {this.state.noiseGenerator.random(45.7098)}<br/>\n                        <code>random(-45.7098)</code>\n                        {this.state.noiseGenerator.random(-45.7098)}<br/>\n                        <code>random(\"lol\")</code>\n                        {this.state.noiseGenerator.random(\"lol\")}<br/>\n                    </div>\n                </div>\n\n            </div>\n        )\n    }\n}\n\nexport default Random","export default (p5) => {\n    let canvas = null\n    // const scale = 0.05\n    const scale = 1\n    // const scale = 10\n\n    let prevData = null\n\n    p5.setup = function() {\n        canvas = p5.createCanvas(0,0)\n        resizeCanvas()\n    }\n  \n    p5.draw = function() {\n        if(p5.data && p5.data !== prevData) {\n            drawFrame()\n            prevData = p5.data            \n        }\n    }\n\n    function drawFrame() {\n\n        p5.background(51)\n\n        p5.fill(255)\n\n        p5.beginShape()\n\n        for (let x = 0; x <= p5.width; x += p5.width/p5.data.divisionValue) {\n\n            let y = p5.map(1 - p5.data.getNoise(x * p5.data.noiseScaleValue * scale), 0, 1, 0, p5.height)\n\n            // p5.circle(x, y - p5.data.offsetValue * p5.height, 10)\n            p5.vertex(x, y - p5.data.offsetValue * p5.height)\n        }\n        \n        p5.vertex(p5.width, p5.height)\n        p5.vertex(0, p5.height)\n\n        p5.endShape(p5.CLOSE)\n\n    }\n\n    function resizeCanvas() {\n        const coef = 0.75\n        const parentWidth = canvas.parent().clientWidth * coef\n        const computedHeight = parentWidth * (9/16)\n        p5.resizeCanvas(parentWidth, computedHeight)\n    }\n    p5.windowResized = function() {\n        resizeCanvas()\n        drawFrame()\n    }\n}","export default (p5) => {\n    let canvas = null\n    // const scale = 0.05\n    const scale = 1\n    // const scale = 10\n\n    let prevData = null\n\n    p5.setup = function() {\n        canvas = p5.createCanvas(0,0)\n        resizeCanvas()\n        // drawFrame()\n    }\n  \n    p5.draw = function() {\n        if(p5.data && p5.data !== prevData) {\n            drawFrame()\n            prevData = p5.data           \n        }\n    }\n\n    function drawFrame() {\n\n        const rectSize = p5.width / p5.data.divisionValue\n\n        p5.noStroke()\n\n        for (var x = 0; x < p5.width; x += rectSize) {\n            for (var y = 0; y < p5.height; y += rectSize) {\n              p5.fill(p5.data.getNoise(x * p5.data.noiseScaleValue * scale, y * p5.data.noiseScaleValue * scale) * 255 + p5.data.offsetValue * 255)\n              p5.rect(x, y, rectSize, rectSize)\n            }\n        }\n    }\n\n    p5.windowResized = function() {\n        resizeCanvas()\n        drawFrame()\n    }\n    function resizeCanvas() {\n        const coef = 0.75\n        const parentWidth = canvas.parent().clientWidth * coef\n        const computedHeight = parentWidth * (9/16)\n        p5.resizeCanvas(parentWidth, computedHeight)\n    }\n}","export default (p5) => {\n    let canvas = null\n    const scale = 5\n    const noiseHeight = 100\n\n    let prevData = null\n\n    let mesh = null\n\n    class Mesh {\n        constructor() {\n            this.verteces = []\n        }\n\n        // TO DO ( éviter la répétition dans la fonction init() )\n        makeVertexForAFace(x,y,z){\n\n            // const h1 = p5.createVector(0,0,0);\n            // const h2 = p5.createVector(x,y,z);\n            // const hypo = h1.dist(h2);\n\n            // let scalar = farestVertex/hypo;\n            let newVector = p5.createVector(x,y,z);\n            // newVector = newVector.mult(scalar);\n\n            return newVector;\n        }\n\n        init(size, resolution){\n\n            const v1 = p5.createVector(0,0,0);\n            const v2 = p5.createVector(size/2,size/2,size/2);\n            const farestVertex = v1.dist(v2);\n\n            // const originVertex = p5.createVector(-size/2,-size/2,size/2);\n            const sliceSize = size/(resolution-1);\n            for(let x=0; x<(resolution-1); x++) {\n                for(let y=0; y<(resolution-1); y++) {\n\n                    const ax = x*sliceSize;\n                    const ay = y*sliceSize;\n                    const az = p5.data.getNoise(x * p5.data.noiseScaleValue * scale, y * p5.data.noiseScaleValue * scale) * noiseHeight - (noiseHeight / 2);\n                    // const az = -noiseHeight / 2\n                    this.verteces.push(this.makeVertexForAFace(ax,ay,az));\n                    const bx = (x+1)*sliceSize;\n                    const by = (y+1)*sliceSize;\n                    const bz = p5.data.getNoise((x + 1) * p5.data.noiseScaleValue * scale, (y + 1) * p5.data.noiseScaleValue * scale) * noiseHeight - (noiseHeight / 2);\n                    // const bz = -noiseHeight / 2\n                    this.verteces.push(this.makeVertexForAFace(bx,by,bz));\n                    const cx = x*sliceSize;\n                    const cy = (y+1)*sliceSize;\n                    const cz = p5.data.getNoise(x * p5.data.noiseScaleValue * scale, (y + 1) * p5.data.noiseScaleValue * scale) * noiseHeight - (noiseHeight / 2);\n                    // const cz = -noiseHeight / 2\n                    this.verteces.push(this.makeVertexForAFace(cx,cy,cz));\n                    const dx = x*sliceSize;\n                    const dy = y*sliceSize;\n                    const dz = p5.data.getNoise(x * p5.data.noiseScaleValue * scale, y * p5.data.noiseScaleValue * scale) * noiseHeight - (noiseHeight / 2);\n                    // const dz = -noiseHeight / 2\n                    this.verteces.push(this.makeVertexForAFace(dx,dy,dz));\n                    const ex = (x+1)*sliceSize;\n                    const ey = y*sliceSize;\n                    const ez = p5.data.getNoise((x + 1) * p5.data.noiseScaleValue * scale, y * p5.data.noiseScaleValue * scale) * noiseHeight - (noiseHeight / 2);\n                    // const ez = -noiseHeight / 2\n                    this.verteces.push(this.makeVertexForAFace(ex,ey,ez));\n                    const fx = (x+1)*sliceSize;\n                    const fy = (y+1)*sliceSize;\n                    const fz = p5.data.getNoise((x + 1) * p5.data.noiseScaleValue * scale, (y + 1) * p5.data.noiseScaleValue * scale) * noiseHeight - (noiseHeight / 2);\n                    // const fz = -noiseHeight / 2\n                    this.verteces.push(this.makeVertexForAFace(fx,fy,fz));\n                }\n            }\n\n        }\n\n        draw() {\n\n            // p5.fill(200);\n            p5.stroke(0);\n            // p5.noStroke();\n\n            // p5.noFill();\n            // p5.stroke(255);\n\n            // p5.noStroke();\n            // p5.normalMaterial();\n\n            p5.directionalLight(255, 255, 255, -1, -1, 0);\n            p5.ambientMaterial(250);\n            \n            p5.push();\n\n            const sliceSize = p5.width/2/(p5.data.divisionValue-1);\n\n            for(let i=0;i<this.verteces.length;i+=3){\n                const vert_A = this.verteces[i];\n                const vert_B = this.verteces[i+1];\n                const vert_C = this.verteces[i+2];\n\n                p5.beginShape();\n                p5.vertex(vert_A.x,vert_A.y,vert_A.z);\n                p5.vertex(vert_B.x,vert_B.y,vert_B.z);\n                p5.vertex(vert_C.x,vert_C.y,vert_C.z);\n                p5.endShape(p5.CLOSE);\n            }\n\n            p5.pop();\n\n        }\n    }\n\n    p5.setup = function() {\n        canvas = p5.createCanvas(0,0, p5.WEBGL)\n        resizeCanvas()\n        // initMesh()\n        // drawFrame()\n    }\n\n    function initMesh() {\n        mesh = new Mesh()\n        // mesh.init(p5.width/2, Math.floor(Math.sqrt(p5.data.divisionValue)) + 2)\n        mesh.init(p5.width/2, p5.data.divisionValue / 2)\n    }\n  \n    p5.draw = function() {\n        if(p5.data && p5.data !== prevData) {\n            // initMesh()\n            drawFrame()\n            prevData = p5.data\n        }\n\n        // p5.rotateY(p5.TWO_PI / p5.millis() * 10000)\n        // drawFrame()\n    }\n\n    function drawFrame() {\n\n        initMesh()\n\n        p5.background(51)\n\n        p5.rotateX(p5.PI / 3)\n        p5.translate(-p5.width/2/2, -p5.width/2/2, 0)\n        // p5.translate(-p5.width/2/2, -p5.width/2/2, p5.height/2/2/2)\n\n        mesh.draw()\n\n        // const rectSize = p5.width / p5.data.divisionValue\n\n        // p5.noStroke()\n        // for (var x = 0; x < p5.width; x += rectSize) {\n        //     for (var y = 0; y < p5.height; y += rectSize) {\n        //       p5.fill(p5.data.getNoise(x * p5.data.noiseScaleValue * scale, y * p5.data.noiseScaleValue * scale) * 255 + p5.data.offsetValue * 255)\n        //       p5.rect(x, y, rectSize, rectSize)\n        //     }\n        // }\n    }\n\n    p5.windowResized = function() {\n        resizeCanvas()\n        drawFrame()\n    }\n    function resizeCanvas() {\n        const coef = 0.75\n        const parentWidth = canvas.parent().clientWidth * coef\n        const computedHeight = parentWidth * (9/16)\n        p5.resizeCanvas(parentWidth, computedHeight)\n    }\n}","import React, {Component} from 'react'\n// import PNG5 from 'png5'\nimport PNG5 from '../../dist/index'\n\nimport P5 from '../../wrappers/P5Wrapper'\nimport noise1DSketch2 from './noise1DSketch2'\nimport noise2DSketch from './noise2DSketch'\nimport noise3DSketch from './noise3DSketch'\n\nclass White extends Component {\n\n    constructor(props) {\n        super(props)\n        \n        this.state = {\n            noiseGenerator: new PNG5(),\n            \n            // scaleValue: 1,\n            scaleValue: 0.3,\n            divisionValue: 64,\n            offsetValue: 0,\n\n            seedValue: 'seed',\n\n            // lodValue: 4,\n            // falloffValue: 0.5,\n            \n            noise1DSketch2: noise1DSketch2,\n            noise2DSketch: noise2DSketch,\n            noise3DSketch: noise3DSketch,\n        }\n\n        this.state.noiseGenerator.setNoiseSeed(this.state.seedValue)\n\n        this.handleChange = this.handleChange.bind(this)\n    }\n\n    componentDidMount() {\n        this.computeNoises()\n    }\n\n    onUpdate() {\n    // componentDidUpdate() {\n        this.computeNoises()\n    }\n\n    handleChange(event) {\n        const {name, value} = event.target\n        this.setState({[name]: value})\n        this.computeNoises()\n    }\n\n    computeNoises() {\n        this.state.noiseGenerator.setNoiseSeed(this.state.seedValue)\n        this.state.noiseGenerator.setPerlinNoiseDetail(this.state.lodValue, this.state.falloffValue)\n    }\n\n    render() {\n        \n        return(\n            <div className=\"container-fluid\">\n                <h1>White Noise</h1>\n\n                <div className=\"row\">\n                    <div className=\"col s3 left-form\">\n                        <div className=\"card-panel grey lighten-4\">\n                            <label>\n                                scale ({this.state.scaleValue}) :\n                                <input type=\"range\" name=\"scaleValue\" \n                                value={this.state.scaleValue} onChange={this.handleChange}\n                                min=\"0.01\" max=\"1\" step=\"0.01\" />\n                            </label>\n                            <label>\n                                divisions ({this.state.divisionValue}) :\n                                <input type=\"range\" name=\"divisionValue\" \n                                value={this.state.divisionValue} onChange={this.handleChange}\n                                min=\"2\" max=\"192\" step=\"1\" />\n                            </label>\n                            <label>\n                                Offset ({this.state.offsetValue}) :\n                                <input type=\"range\" name=\"offsetValue\" \n                                value={this.state.offsetValue} onChange={this.handleChange}\n                                min=\"-1\" max=\"1\" step=\"0.01\" />\n                            </label>\n                        </div>\n\n                        <div className=\"card-panel grey lighten-4\">\n                            <label>\n                                Seed :\n                                <input type=\"text\" value={this.state.seedValue} onChange={this.handleChange} name=\"seedValue\"></input>\n                                {/* <input type=\"number\" value={this.state.seedValue} onChange={this.handleChange} name=\"seedValue\"></input> */}\n                            </label>\n                            {/* <button>Generate</button> */}\n                        </div>\n                    </div>\n    \n                    <div className=\"col s9\">\n        \n                        <h3>Determined Random</h3>\n                        <code>getWhiteNoise(1)</code>\n                        {this.state.noiseGenerator.getWhiteNoise(1)}<br/>\n                        <code>getWhiteNoise(1, 2)</code>\n                        {this.state.noiseGenerator.getWhiteNoise(1, 2)}<br/>\n                        <code>getWhiteNoise(1, 2, 3)</code>\n                        {this.state.noiseGenerator.getWhiteNoise(1, 2, 3)}<br/>\n                        <code>getWhiteNoise(45.7098)</code>\n                        {this.state.noiseGenerator.getWhiteNoise(45.7098)}<br/>\n                        <code>getWhiteNoise(-45.7098)</code>\n                        {this.state.noiseGenerator.getWhiteNoise(-45.7098)}<br/>\n                        <code>getWhiteNoise(\"lol\")</code>\n                        {this.state.noiseGenerator.getWhiteNoise(\"lol\")}<br/>\n        \n                        <h3>1D noise</h3>\n                        <P5 sketch={this.state.noise1DSketch2}\n                            data={{\n                                offsetValue: this.state.offsetValue,\n                                noiseScaleValue: this.state.scaleValue,\n                                divisionValue: this.state.divisionValue,\n                                getNoise: (x,y,z) => this.state.noiseGenerator.getWhiteNoise(x,y,z)\n                            }}\n                        />\n                        <h3>2D noise</h3>\n                        <P5 sketch={this.state.noise2DSketch} \n                            data={{\n                                offsetValue: this.state.offsetValue,\n                                noiseScaleValue: this.state.scaleValue,\n                                divisionValue: this.state.divisionValue,\n                                getNoise: (x,y,z) => this.state.noiseGenerator.getWhiteNoise(x,y,z)\n                            }}\n                        />\n                        <h3>3D noise</h3>\n                        <P5 sketch={this.state.noise3DSketch} \n                            data={{\n                                offsetValue: this.state.offsetValue,\n                                noiseScaleValue: this.state.scaleValue,\n                                divisionValue: this.state.divisionValue,\n                                getNoise: (x,y,z) => this.state.noiseGenerator.getWhiteNoise(x,y,z)\n                            }}\n                        />\n                    </div>\n                </div>\n\n            </div>\n        )\n    }\n}\n\nexport default White","export default (p5) => {\n    let canvas = null\n    const scale = 0.05\n\n    let prevData = null\n\n    p5.setup = function() {\n        canvas = p5.createCanvas(0,0)\n        resizeCanvas()\n    }\n  \n    p5.draw = function() {\n        if(p5.data && p5.data !== prevData) {\n            drawFrame()\n            prevData = p5.data            \n        }\n    }\n\n    function drawFrame() {\n        p5.background(51)\n\n        p5.fill(255)\n\n        p5.beginShape()\n\n        for (let x = 0; x <= p5.width; x += p5.width/p5.data.divisionValue) {\n            let y = p5.map(1 - p5.data.getNoise(x * p5.data.noiseScaleValue * scale), 0, 1, 0, p5.height)\n            p5.vertex(x, y - p5.data.offsetValue * p5.height)\n        }\n        \n        p5.vertex(p5.width, p5.height)\n        p5.vertex(0, p5.height)\n        p5.endShape(p5.CLOSE)\n\n    }\n\n    function resizeCanvas() {\n        const coef = 0.75\n        const parentWidth = canvas.parent().clientWidth * coef\n        const computedHeight = parentWidth * (9/16)\n        p5.resizeCanvas(parentWidth, computedHeight)\n    }\n    p5.windowResized = function() {\n        resizeCanvas()\n        drawFrame()\n    }\n}","export default (p5) => {\n    let canvas = null\n    const scale = 0.05\n\n    let prevData = null\n\n    p5.setup = function() {\n        canvas = p5.createCanvas(0,0)\n        resizeCanvas()\n        // drawFrame()\n    }\n  \n    p5.draw = function() {\n        if(p5.data && p5.data !== prevData) {\n            drawFrame()\n            prevData = p5.data            \n        }\n    }\n\n    function drawFrame() {\n\n        const rectSize = p5.width / p5.data.divisionValue\n\n        p5.noStroke()\n        for (var x = 0; x < p5.width; x += rectSize) {\n            for (var y = 0; y < p5.height; y += rectSize) {\n              p5.fill(p5.data.getNoise(x * p5.data.noiseScaleValue * scale, y * p5.data.noiseScaleValue * scale) * 255 + p5.data.offsetValue * 255)\n              p5.rect(x, y, rectSize, rectSize)\n            }\n        }\n    }\n\n    p5.windowResized = function() {\n        resizeCanvas()\n        drawFrame()\n    }\n    function resizeCanvas() {\n        const coef = 0.75\n        const parentWidth = canvas.parent().clientWidth * coef\n        const computedHeight = parentWidth * (9/16)\n        p5.resizeCanvas(parentWidth, computedHeight)\n    }\n}","export default (p5) => {\n    let canvas = null\n    const scale = 0.5\n    const noiseHeight = 100\n\n    let prevData = null\n\n    let mesh = null\n\n    class Mesh {\n        constructor() {\n            this.verteces = []\n        }\n\n        // TO DO ( éviter la répétition dans la fonction init() )\n        makeVertexForAFace(x,y,z){\n\n            // const h1 = p5.createVector(0,0,0);\n            // const h2 = p5.createVector(x,y,z);\n            // const hypo = h1.dist(h2);\n\n            // let scalar = farestVertex/hypo;\n            let newVector = p5.createVector(x,y,z);\n            // newVector = newVector.mult(scalar);\n\n            return newVector;\n        }\n\n        init(size, resolution){\n\n            const v1 = p5.createVector(0,0,0);\n            const v2 = p5.createVector(size/2,size/2,size/2);\n            const farestVertex = v1.dist(v2);\n\n            // const originVertex = p5.createVector(-size/2,-size/2,size/2);\n            const sliceSize = size/(resolution-1);\n            for(let x=0; x<(resolution-1); x++) {\n                for(let y=0; y<(resolution-1); y++) {\n\n                    const ax = x*sliceSize;\n                    const ay = y*sliceSize;\n                    const az = p5.data.getNoise(x * p5.data.noiseScaleValue * scale, y * p5.data.noiseScaleValue * scale) * noiseHeight - (noiseHeight / 2);\n                    // const az = -noiseHeight / 2\n                    this.verteces.push(this.makeVertexForAFace(ax,ay,az));\n                    const bx = (x+1)*sliceSize;\n                    const by = (y+1)*sliceSize;\n                    const bz = p5.data.getNoise((x + 1) * p5.data.noiseScaleValue * scale, (y + 1) * p5.data.noiseScaleValue * scale) * noiseHeight - (noiseHeight / 2);\n                    // const bz = -noiseHeight / 2\n                    this.verteces.push(this.makeVertexForAFace(bx,by,bz));\n                    const cx = x*sliceSize;\n                    const cy = (y+1)*sliceSize;\n                    const cz = p5.data.getNoise(x * p5.data.noiseScaleValue * scale, (y + 1) * p5.data.noiseScaleValue * scale) * noiseHeight - (noiseHeight / 2);\n                    // const cz = -noiseHeight / 2\n                    this.verteces.push(this.makeVertexForAFace(cx,cy,cz));\n                    const dx = x*sliceSize;\n                    const dy = y*sliceSize;\n                    const dz = p5.data.getNoise(x * p5.data.noiseScaleValue * scale, y * p5.data.noiseScaleValue * scale) * noiseHeight - (noiseHeight / 2);\n                    // const dz = -noiseHeight / 2\n                    this.verteces.push(this.makeVertexForAFace(dx,dy,dz));\n                    const ex = (x+1)*sliceSize;\n                    const ey = y*sliceSize;\n                    const ez = p5.data.getNoise((x + 1) * p5.data.noiseScaleValue * scale, y * p5.data.noiseScaleValue * scale) * noiseHeight - (noiseHeight / 2);\n                    // const ez = -noiseHeight / 2\n                    this.verteces.push(this.makeVertexForAFace(ex,ey,ez));\n                    const fx = (x+1)*sliceSize;\n                    const fy = (y+1)*sliceSize;\n                    const fz = p5.data.getNoise((x + 1) * p5.data.noiseScaleValue * scale, (y + 1) * p5.data.noiseScaleValue * scale) * noiseHeight - (noiseHeight / 2);\n                    // const fz = -noiseHeight / 2\n                    this.verteces.push(this.makeVertexForAFace(fx,fy,fz));\n                }\n            }\n\n        }\n\n        draw() {\n\n            // p5.fill(200);\n            // p5.stroke(127);\n            // p5.noStroke();\n\n            // p5.noFill();\n            // p5.stroke(255);\n            // p5.ambientLight(150);\n\n            // p5.noStroke();\n            // p5.normalMaterial();\n\n            p5.directionalLight(255, 255, 255, -1, -1, 0);\n            p5.ambientMaterial(250);\n\n            p5.push();\n\n            const sliceSize = p5.width/2/(p5.data.divisionValue-1);\n\n            for(let i=0;i<this.verteces.length;i+=3){\n                const vert_A = this.verteces[i];\n                const vert_B = this.verteces[i+1];\n                const vert_C = this.verteces[i+2];\n\n                p5.beginShape();\n                p5.vertex(vert_A.x,vert_A.y,vert_A.z);\n                p5.vertex(vert_B.x,vert_B.y,vert_B.z);\n                p5.vertex(vert_C.x,vert_C.y,vert_C.z);\n                p5.endShape(p5.CLOSE);\n            }\n\n            p5.pop();\n\n        }\n    }\n\n    p5.setup = function() {\n        canvas = p5.createCanvas(0,0, p5.WEBGL)\n        resizeCanvas()\n        // initMesh()\n        // drawFrame()\n    }\n\n    function initMesh() {\n        mesh = new Mesh()\n        // mesh.init(p5.width/2, Math.floor(Math.sqrt(p5.data.divisionValue)) + 2)\n        mesh.init(p5.width/2, p5.data.divisionValue / 2)\n    }\n  \n    p5.draw = function() {\n        if(p5.data && p5.data !== prevData) {\n            // initMesh()\n            drawFrame()\n            prevData = p5.data\n        }\n \n        // p5.rotateY(p5.TWO_PI / p5.millis() * 10000)\n        // drawFrame()\n    }\n\n    function drawFrame() {\n\n        initMesh()\n\n        p5.background(51)\n\n        p5.rotateX(p5.PI / 3)\n        p5.translate(-p5.width/2/2, -p5.width/2/2, 0)\n        // p5.translate(-p5.width/2/2, -p5.width/2/2, p5.height/2/2/2)\n\n        mesh.draw()\n\n        // const rectSize = p5.width / p5.data.divisionValue\n\n        // p5.noStroke()\n        // for (var x = 0; x < p5.width; x += rectSize) {\n        //     for (var y = 0; y < p5.height; y += rectSize) {\n        //       p5.fill(p5.data.getNoise(x * p5.data.noiseScaleValue * scale, y * p5.data.noiseScaleValue * scale) * 255 + p5.data.offsetValue * 255)\n        //       p5.rect(x, y, rectSize, rectSize)\n        //     }\n        // }\n    }\n\n    p5.windowResized = function() {\n        resizeCanvas()\n        drawFrame()\n    }\n    function resizeCanvas() {\n        const coef = 0.75\n        const parentWidth = canvas.parent().clientWidth * coef\n        const computedHeight = parentWidth * (9/16)\n        p5.resizeCanvas(parentWidth, computedHeight)\n    }\n}","import React, {Component} from 'react'\n// import PNG5 from 'png5'\nimport PNG5 from '../../dist/index'\n\nimport P5 from '../../wrappers/P5Wrapper'\nimport noise1DSketch from './noise1DSketch'\nimport noise2DSketch from './noise2DSketch'\nimport noise3DSketch from './noise3DSketch'\n\nclass Perlin extends Component {\n\n    constructor(props) {\n        super(props)\n        \n        this.state = {\n            noiseGenerator: new PNG5(),\n\n            // meshSize: 200,\n\n            // scaleValue: 1,\n            scaleValue: 0.3,\n            divisionValue: 64,\n            offsetValue: 0,\n\n            seedValue: 'seed',\n            lodValue: 4,\n            falloffValue: 0.5,\n            \n            noise1DSketch: noise1DSketch,\n            noise2DSketch: noise2DSketch,\n            noise3DSketch: noise3DSketch,\n        }\n\n        this.state.noiseGenerator.setNoiseSeed(this.state.seedValue)\n\n        this.handleChange = this.handleChange.bind(this)\n    }\n\n    componentDidMount() {\n        this.computeNoises()\n    }\n\n    onUpdate() {\n    // componentDidUpdate() {\n        this.computeNoises()\n    }\n\n    handleChange(event) {\n        const {name, value} = event.target\n        this.setState({[name]: value})\n        this.computeNoises()\n    }\n\n    computeNoises() {\n        this.state.noiseGenerator.setNoiseSeed(this.state.seedValue)\n        this.state.noiseGenerator.setPerlinNoiseDetail(this.state.lodValue, this.state.falloffValue)\n    }\n    \n    rgbToHex(value) { \n        const rgbValue = Math.round(value * 255)\n        let hex = Number(rgbValue).toString(16);\n        if (hex.length < 2) {\n            hex = \"0\" + hex;\n        }\n        return \"#\" + hex + hex + hex;\n    }\n    \n    styleForCell(hexValue) {\n        return {\n            display: 'inline-block',\n            width: '10px',\n            height: '10px',\n            // margin: '0px',\n            // padding: '0px',\n            backgroundColor: this.rgbToHex(hexValue),\n        }\n    }\n\n    render() {\n        \n        return(\n            <div className=\"container-fluid\">\n                <h1>Perlin Noise</h1>\n\n                <div className=\"row\">\n                    <div className=\"col s3 left-form\">\n\n                        <div className=\"card-panel grey lighten-4\">\n                            <label>\n                                scale ({this.state.scaleValue}) :\n                                <input type=\"range\" name=\"scaleValue\" \n                                value={this.state.scaleValue} onChange={this.handleChange}\n                                min=\"0.01\" max=\"1\" step=\"0.01\" />\n                            </label>\n                            <label>\n                                divisions ({this.state.divisionValue}) :\n                                <input type=\"range\" name=\"divisionValue\" \n                                value={this.state.divisionValue} onChange={this.handleChange}\n                                min=\"2\" max=\"192\" step=\"1\" />\n                            </label>\n                            <label>\n                                Offset ({this.state.offsetValue}) :\n                                <input type=\"range\" name=\"offsetValue\" \n                                value={this.state.offsetValue} onChange={this.handleChange}\n                                min=\"-1\" max=\"1\" step=\"0.01\" />\n                            </label>\n                        </div>\n\n                        <div className=\"card-panel grey lighten-4\">\n                            <label>\n                                Seed :\n                                <input type=\"text\" value={this.state.seedValue} onChange={this.handleChange} name=\"seedValue\"></input>\n                                {/* <input type=\"number\" value={this.state.seedValue} onChange={this.handleChange} name=\"seedValue\"></input> */}\n                            </label>\n                            <label>\n                                lod ({this.state.lodValue}) :\n                                <input type=\"range\" name=\"lodValue\" \n                                value={this.state.lodValue} onChange={this.handleChange}\n                                min=\"1\" max=\"8\" step=\"1\" />\n                            </label>\n                            <label>\n                                falloff ({this.state.falloffValue}) :\n                                <input type=\"range\" name=\"falloffValue\" \n                                value={this.state.falloffValue} onChange={this.handleChange}\n                                min=\"0.01\" max=\"1\" step=\"0.01\" />\n                            </label>\n                            {/* <button>Generate</button> */}\n                        </div>\n                    </div>\n\n                    <div className=\"col s9\">\n                        <h3>Determined Random</h3>\n                        <code>getPerlinNoise()</code>\n                        {this.state.noiseGenerator.getPerlinNoise()}<br/>\n                        <code>getPerlinNoise(1)</code>\n                        {this.state.noiseGenerator.getPerlinNoise(1)}<br/>\n                        <code>getWhiteNoise(1, 2)</code>\n                        {this.state.noiseGenerator.getWhiteNoise(1, 2)}<br/>\n                        <code>getWhiteNoise(1, 2, 3)</code>\n                        {this.state.noiseGenerator.getWhiteNoise(1, 2, 3)}<br/>\n                        <code>getPerlinNoise(45.7098)</code>\n                        {this.state.noiseGenerator.getPerlinNoise(45.7098)}<br/>\n                        <code>getPerlinNoise(-45.7098)</code>\n                        {this.state.noiseGenerator.getPerlinNoise(-45.7098)}<br/>\n                        <code>getPerlinNoise(\"lol\")</code>\n                        {this.state.noiseGenerator.getPerlinNoise(\"lol\")}<br/>\n        \n                        <h3>1D noise</h3>\n                        <P5 sketch={this.state.noise1DSketch}\n                            data={{\n                                offsetValue: this.state.offsetValue,\n                                noiseScaleValue: this.state.scaleValue,\n                                divisionValue: this.state.divisionValue,\n                                getNoise: (x,y,z) => this.state.noiseGenerator.getPerlinNoise(x,y,z)\n                            }}\n                        />\n                        <h3>2D noise</h3>\n                        <P5 sketch={this.state.noise2DSketch} \n                            data={{\n                                offsetValue: this.state.offsetValue,\n                                noiseScaleValue: this.state.scaleValue,\n                                divisionValue: this.state.divisionValue,\n                                getNoise: (x,y,z) => this.state.noiseGenerator.getPerlinNoise(x,y,z)\n                            }}\n                        />\n                        <h3>3D noise</h3>\n                        <P5 sketch={this.state.noise3DSketch} \n                            data={{\n                                offsetValue: this.state.offsetValue,\n                                noiseScaleValue: this.state.scaleValue,\n                                divisionValue: this.state.divisionValue,\n                                getNoise: (x,y,z) => this.state.noiseGenerator.getPerlinNoise(x,y,z)\n                            }}\n                        />\n                    </div>\n                </div>\n\n            </div>\n        )\n    }\n}\n\nexport default Perlin","import p from 'p5'\n\nexport default (p5) => {\n\n\tlet canvas = null\n\tconst scale = 0.05\n\t// const scale = 1\n\t// const scale = 10\n\n\tlet rectSize = 20\n\t\n\tconst backgroundColor = p5.color('#FFFFFF')\n\t// const backgroundColor = p5.color('#BBFFFF')\n\tlet particlesColor = null\n\tlet vectors = []\n\tlet particles = []\n\n\tlet prevData = null\n\n\tlet fr\n\t\n\tclass Particles {\n\n\t\tconstructor(i, pos, vel) {\n\t\t\t// this.position = p5.createVector(pos.x, pos.y)\n\t\t\t// this.velocity = p5.createVector(vel.x, vel.y)\n\t\t\t// this.acceleration = p5.createVector(vel.x, vel.y)\n\t\t\tthis.position = p5.createVector(p5.data.random(i) * p5.width, p5.data.random(i+1) * p5.height)\n\t\t\tthis.velocity = p5.createVector(0, 0)\n\t\t\tthis.acceleration = p5.createVector(0, 0)\n\n\t\t\tthis.color = p5.color(Math.random() * 255, Math.random() * 255, Math.random() * 255)\n\t\t\tthis.color.setAlpha(p5.data.alphaValue)\n\t\t}\n\n\t\tupdate() {\n\t\t\tthis.velocity.add(this.acceleration)\n\t\t\tthis.velocity.limit(p5.data.particlesMaxSpeedValue)\n\t\t\tthis.position.add(this.velocity)\n\n\t\t\tthis.acceleration.mult(0)\n\t\t}\n\n\t\tapplyForce(force) {\n\t\t\tthis.acceleration.add(force)\n\t\t}\n\n\t\tedges() {\n\t\t\tif(this.position.x > p5.width) this.position.x = 0\n\t\t\tif(this.position.x < 0) this.position.x = p5.width\n\t\t\tif(this.position.y > p5.height) this.position.y = 0\n\t\t\tif(this.position.y < 0) this.position.y = p5.height\n\t\t}\n\n\t\tdraw() {\n\t\t\t// p5.stroke(this.color)\n\t\t\tp5.stroke(particlesColor)\n\t\t\tp5.strokeWeight(p5.data.particlesStrokeWeightValue)\n\t\t\tp5.point(this.position.x, this.position.y)\n\t\t}\n\t}\n\n\tp5.setup = function() {\n\t  \tcanvas = p5.createCanvas(0,0)\n\t  \tresizeCanvas()\n\n\t  \tp5.background(backgroundColor)\n\n\t  \tfr = p5.createP('')\n\t}\n\n\tfunction initParticles() {\n\t  \tp5.background(backgroundColor)\n\t\tparticles = []\n\t  \tfor(let i=0; i < p5.data.particlesNumberValue; i++) {\n\t  \t\tparticles[i] = new Particles(i)\n\t\t\t// particles[i].color.setAlpha(p5.data.alphaValue)\n\t  \t}\n\t\tparticlesColor = p5.color(p5.data.particlesStrokeColorValue)\n\t\tparticlesColor.setAlpha(p5.data.alphaValue)\n\t}\n\n\tp5.draw = function() {\n\n        if(p5.data) {\n\t        if(p5.data !== prevData) {\n\t        \t// console.log('NEW DATA §!!!', p5.data.particlesNumberValue)\n\t            initParticles()\n\t            prevData = p5.data\n\t        }\n        \tdrawFrame()\n        }\n\t\t\n\t\t// console.log('frameRate : ', p5.floor(p5.frameRate()))\n\n        fr.html('frameRate : ' + p5.floor(p5.frameRate()))\n\t}\n\n\tfunction drawFrame() {\n\n\t  \t// p5.background(backgroundColor)\n\n\t  \tvectors = []\n        for (var x = 0; x < p5.width; x += rectSize) {\n        \tvectors[x/rectSize] = []\n            for (var y = 0; y < p5.height; y += rectSize) {\n\t\t\t\tconst noiseValue = p5.data.getNoise(x * p5.data.noiseScaleValue * scale, y * p5.data.noiseScaleValue * scale, p5.millis() / p5.data.timeScaleValue)\n\t\t\t\tdrawCell(x, y, noiseValue)\n\t\t\t\tconst cellVector = p.Vector.fromAngle(p5.TWO_PI * noiseValue * p5.data.noiseAppCoefValue)\n            \tvectors[x/rectSize][y/rectSize] = cellVector\n\t\t\t\tdrawVector(x, y, cellVector)\n            }\n        }\n\n        drawParticles()\n\t}\n\n\tfunction drawCell(x, y, noiseValue) {\n\t\tif(p5.data.showNoise) {\n\t\t\tp5.noStroke()\n\t\t\tp5.fill(noiseValue * 255 + 50)\n\t\t\tp5.rect(x, y, rectSize, rectSize)\n\t\t}\n\t}\n\n\tfunction drawVector(x, y, cellVector) {\n\t\tif(p5.data.showNoise) {\n\t\t\t// p5.stroke('#00ffee')\n\t\t\tp5.stroke(0)\n\t\t\tp5.strokeWeight(1)\n\t\t\tp5.push()\n\t\t\tp5.translate(x + rectSize/2, y + rectSize/2)\n\t\t\tp5.rotate(cellVector.heading())\n\t\t\tp5.line(0, 0, rectSize, 0)\n\t\t\tp5.pop()\n\t\t}\n\t}\n\n\tfunction drawParticles() {\n        for(let i=0; i < particles.length; i++) {\n        \tconst particle = particles[i]\n        \tparticle.edges()\n        \tparticle.applyForce(\n        \t\tvectors[Math.floor(particle.position.x / rectSize)][Math.floor(particle.position.y / rectSize)]\n        \t)\n\t        particle.update()\n\t        particle.draw()\t\n        }\n\t}\n\n\tfunction resizeCanvas() {\n\t  \tconst coef = 0.75\n\t  \tconst parentWidth = canvas.parent().clientWidth * coef\n\t  \tconst computedHeight = parentWidth * (9/16)\n\t  \tp5.resizeCanvas(parentWidth, computedHeight)\n\n        if(p5.data) {\n\t  \t\tinitParticles()\n\t  \t}\n\t}\n\tp5.windowResized = function() {\n\t  \tresizeCanvas()\n        drawFrame()\n\t}\n}","import React, {Component, Fragment} from 'react'\n// import PNG5 from 'png5'\nimport PNG5 from '../../dist/index'\n\nimport P5 from '../../wrappers/P5Wrapper'\nimport flowSketch from './flowSketch'\n\nclass White extends Component {\n\n    constructor(props) {\n        super(props)\n        \n        this.state = {\n            noiseGenerator: new PNG5(),\n\n            startSimulation: false,\n            \n            showNoise: false,\n            noiseScaleValue: 0.15,\n            timeScaleValue: 5000,\n            noiseAppCoefValue: 1,\n\n            showParticles: true,\n            particlesNumberValue: 150,\n            particlesStrokeColorValue: '#00FFFF',\n            // particlesStrokeColorValue: '#000000',\n            particlesStrokeWeightValue: 1,\n            particlesMaxSpeedValue: 1,\n            // divisionValue: 64,\n\n            seedValue: 'seed',\n            // lodValue: 4,\n            // falloffValue: 0.5,\n\n            alphaValue: 4,\n            \n            flowSketch: flowSketch,\n        }\n\n        // this.state.noiseGenerator.setNoiseSeed(this.state.seedValue)\n\n        this.handleStart = this.handleStart.bind(this)\n        this.handleChange = this.handleChange.bind(this)\n        this.handleCheckboxChange = this.handleCheckboxChange.bind(this)\n    }\n\n    componentDidMount() {\n        this.computeNoises()\n    }\n\n    onUpdate() {\n    // componentDidUpdate() {\n        this.computeNoises()\n    }\n\n    handleStart() {\n        this.setState({startSimulation: !this.state.startSimulation})\n    }\n\n    handleChange(event) {\n        const {name, value} = event.target\n        this.setState({[name]: value})\n        this.computeNoises()\n    }\n\n    handleCheckboxChange(event) {\n        const {name} = event.target\n        this.setState({[name]: !this.state[name]})\n        // this.computeNoises()\n    }\n\n    computeNoises() {\n        this.state.noiseGenerator.setNoiseSeed(this.state.seedValue)\n        // this.state.noiseGenerator.setPerlinNoiseDetail(this.state.lodValue, this.state.falloffValue)\n    }\n\n    trigger(callback) {\n    \tcallback()\n    }\n\n    render() {\n        \n        return(\n            <div className=\"container-fluid\">\n\t            <h1>Flow Field</h1>\n                <div className=\"row\">\n                    <div className=\"col s3 left-form\">\n                        <div className=\"card grey lighten-4\">\n                            <div className=\"card-content\">\n                                <div className=\"card-title\">\n                                    Noise\n                                    <span className=\"toggle-switch switch\">\n                                        <label>\n                                            Hide\n                                            <input name=\"showNoise\" type=\"checkbox\" className=\"filled-in\" onChange={this.handleCheckboxChange} defaultChecked={this.state.showNoise} />\n                                            <span className=\"lever\"></span>\n                                            Show\n                                        </label>\n                                    </span>\n                                </div>\n                                {/* {this.state.showNoise ? ( */}\n                                    <Fragment>\n                                        <label>\n                                            Seed :\n                                            <input type=\"text\" value={this.state.seedValue} onChange={this.handleChange} name=\"seedValue\"></input>\n                                            {/* <input type=\"number\" value={this.state.seedValue} onChange={this.handleChange} name=\"seedValue\"></input> */}\n                                        </label>\n                                        <label>\n                                            noise time scale (millis() / {this.state.timeScaleValue}) :\n                                            <input type=\"range\" name=\"timeScaleValue\" \n                                            value={this.state.timeScaleValue} onChange={this.handleChange}\n                                            min=\"250\" max=\"10000\" step=\"1\" />\n                                        </label>\n                                        <label>\n                                            noise scale ({this.state.noiseScaleValue}) :\n                                            <input type=\"range\" name=\"noiseScaleValue\" \n                                            value={this.state.noiseScaleValue} onChange={this.handleChange}\n                                            min=\"0.01\" max=\"1\" step=\"0.01\" />\n                                        </label>\n                                        {/* <label>\n                                            noise app coef ({this.state.noiseAppCoefValue}) :\n                                            <input type=\"range\" name=\"noiseAppCoefValue\" \n                                            value={this.state.noiseAppCoefValue} onChange={this.handleChange}\n                                            min=\"0.01\" max=\"1\" step=\"0.01\" />\n                                        </label> */}\n                                    </Fragment>\n                                {/* }) : null} */}\n                            </div>\n                        </div>\n\n                        <div className=\"card grey lighten-4\">\n                            <div className=\"card-content\">\n                                <div className=\"card-title\">\n                                    Particles\n                                </div>\n                                {/* {this.state.showParticles ? ( */}\n                                    <Fragment>\n                                        <label>\n                                            particles number ({this.state.particlesNumberValue}) :\n                                            <input type=\"range\" name=\"particlesNumberValue\" \n                                            value={this.state.particlesNumberValue} onChange={this.handleChange}\n                                            min=\"1\" max=\"500\" step=\"1\" />\n                                        </label>\n                                        <label>\n                                            particles stroke color ({this.state.particlesStrokeColorValue}) :\n                                            <input type=\"color\" name=\"particlesStrokeColorValue\" \n                                            value={this.state.particlesStrokeColorValue} onChange={this.handleChange}\n                                            min=\"1\" max=\"10\" step=\"1\" />\n                                        </label><br/>\n                                        <label>\n                                            Alpha ({this.state.alphaValue}) :\n                                            <input type=\"range\" name=\"alphaValue\" \n                                            value={this.state.alphaValue} onChange={this.handleChange}\n                                            min=\"0\" max=\"255\" step=\"0.1\" />\n                                        </label>\n                                        <label>\n                                            particles stroke weight ({this.state.particlesStrokeWeightValue}) :\n                                            <input type=\"range\" name=\"particlesStrokeWeightValue\" \n                                            value={this.state.particlesStrokeWeightValue} onChange={this.handleChange}\n                                            min=\"1\" max=\"10\" step=\"1\" />\n                                        </label>\n                                        <label>\n                                            particles max speed ({this.state.particlesMaxSpeedValue}) :\n                                            <input type=\"range\" name=\"particlesMaxSpeedValue\" \n                                            value={this.state.particlesMaxSpeedValue} onChange={this.handleChange}\n                                            min=\"0.01\" max=\"20\" step=\"0.01\" />\n                                        </label>\n                                    </Fragment>\n                                {/* }) : null} */}\n                            </div>\n                        </div>\n\n                        <div className=\"card grey lighten-4\">\n                            <div className=\"card-content\">\n                                <button onClick={this.handleStart}>Launch simulation</button>\n                            </div>\n                        </div>\n                    </div>\n    \n                    <div className=\"col s9\">\n\t\t\t            <P5 sketch={this.state.flowSketch}\n\t\t\t            data={{\n\t\t\t            \ttrigger: () => {this.trigger()},\n                            startSimulation: this.state.startSimulation,\n                            showNoise: this.state.showNoise,\n\t\t\t            \tnoiseScaleValue: this.state.noiseScaleValue,\n                            timeScaleValue: this.state.timeScaleValue,\n\t\t\t            \tnoiseAppCoefValue: this.state.noiseAppCoefValue,\n\t\t\t            \tparticlesNumberValue: this.state.particlesNumberValue,\n\t\t\t            \tparticlesStrokeColorValue: this.state.particlesStrokeColorValue,\n                            alphaValue: this.state.alphaValue,\n\t\t\t            \tparticlesStrokeWeightValue: this.state.particlesStrokeWeightValue,\n                            particlesMaxSpeedValue: this.state.particlesMaxSpeedValue,\n\t\t\t            \trandom: (x, y) => this.state.noiseGenerator.getWhiteNoise(x, y), \n                            getNoise: (x,y,z) => this.state.noiseGenerator.getPerlinNoise(x,y,z)\n\t\t\t            }}\n\t\t\t            />\n                    </div>\n                </div>\n\n            </div>\n        )\n    }\n}\n\nexport default White","import React, {useEffect} from 'react';\nimport {\n  // BrowserRouter as Router,\n  HashRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\n\nimport M from 'materialize-css/dist/js/materialize.min.js'\nimport 'materialize-css/dist/css/materialize.min.css'\nimport './App.css'\n\nimport P5 from './wrappers/P5Wrapper'\n\nimport Random from './pages/random/Random'\nimport White from './pages/white/White'\nimport Perlin from './pages/perlin/Perlin'\nimport Flow from './pages/flow/Flow'\n\nfunction App() {\n\n  // const urlPrefix = '/png5'\n  const urlPrefix = ''\n\n  useEffect(() => {\n      M.AutoInit()\n  }, [])\n  const links = [\n    {to: \"/random\", name: \"Random\"},\n    {to: \"/white-noise\", name: \"White Noise\"},\n    // {to: \"/pink-noise\", name: \"Pink Noise\"},\n    // {to: \"/simplex-noise\", name: \"Simplex Noise\"},\n    {to: \"/perlin-noise\", name: \"Perlin Noise\"},\n    // {to: \"/brownian-noise\", name: \"Brownian Noise\"},\n\n    // {to: \"/diamond-square\", name: \"Diamond square\"},\n    // {to: \"/power-law-noise\", name: \"Power-law noise\"},\n    // {to: \"/uber-noise\", name: \"Uber noise\"},\n\n    {to: \"/flow-field\", name: \"Flow field\"},\n    // {to: \"/cellular-noise\", name: \"Cellular Noise\"},\n  ]\n\n  function getNavLinks() {\n    return links.map((link, linkIndex) => (\n      <li key={linkIndex}>\n        <Link to={urlPrefix + link.to}>{link.name}</Link>\n      </li>\n    ))\n  }\n\n  return (\n    <Router basename=\"/\">\n      <div className=\"App\">\n\n        <header>\n\n          <nav className=\"nav-extended\">\n            <div className=\"nav-wrapper\">\n              <Link to={urlPrefix + \"/\"} className=\"brand-logo right\"><i className=\"material-icons\">cloud</i>png5</Link>\n              <a href=\"#\" data-target=\"mobile-demo\" className=\"sidenav-trigger\"><i className=\"material-icons\">menu</i></a>\n\n              <ul id=\"nav-mobile\" className=\"left hide-on-med-and-down\">\n                {getNavLinks()}\n              </ul>\n            </div>\n\n            {/* <div className=\"nav-content\">\n              <span className=\"nav-title\">Title</span>\n            </div> */}\n          </nav>\n\n          <ul className=\"sidenav\" id=\"mobile-demo\">\n            {getNavLinks()}\n          </ul>\n\n        </header>\n\n        <Switch>\n          <Route path={urlPrefix + \"/random\"}>\n            <Random />\n          </Route>\n          <Route path={urlPrefix + \"/white-noise\"}>\n            <White />\n          </Route>\n          <Route path={urlPrefix + \"/pink-noise\"}>\n            <h1>Pink Noise</h1>\n          </Route>\n          <Route path={urlPrefix + \"/simplex-noise\"}>\n            <h1>Simplex Noise</h1>\n          </Route>\n          <Route path={urlPrefix + \"/perlin-noise\"}>\n            <Perlin />\n          </Route>\n          <Route path={urlPrefix + \"/brownian-noise\"}>\n            <h1>Brownian Noise</h1>\n          </Route>\n\n          <Route path={urlPrefix + \"/diamond-square\"}>\n            <h1>Diamond square</h1>\n          </Route>\n          <Route path={urlPrefix + \"/power-law-noise\"}>\n            <h1>Power-law noise</h1>\n          </Route>\n          <Route path={urlPrefix + \"/uber-noise\"}>\n            <h1>Uber noise</h1>\n          </Route>\n\n          <Route path={urlPrefix + \"/flow-field\"}>\n            <Flow />\n          </Route>\n          <Route path={urlPrefix + \"/cellular-noise\"}>\n            <h1>Cellular Noise</h1>\n          </Route>\n\n          <Route path={\"/\" || urlPrefix}>\n            <h1>Welcome</h1>\n          </Route>\n          \n          <Route path={urlPrefix + \"/*\"}>\n            404\n          </Route>\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}